{
    "version": "https://jsonfeed.org/version/1",
    "title": "CygneNoir",
    "subtitle": "",
    "icon": "http://example.com/assets/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/08/12/HaoKa/Hao%20Ka%20Recommend/",
            "url": "http://example.com/2024/08/12/HaoKa/Hao%20Ka%20Recommend/",
            "title": "",
            "date_published": "2024-08-12T06:05:14.454Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2024/08/12/HaoKa/172%20HaoKa%20Proxy/",
            "url": "http://example.com/2024/08/12/HaoKa/172%20HaoKa%20Proxy/",
            "title": "流量卡代理",
            "date_published": "2024-08-12T06:00:41.080Z",
            "content_html": "<h1 id=\"什么是流量卡代理\"><a class=\"anchor\" href=\"#什么是流量卡代理\">#</a> 什么是流量卡代理：</h1>\n<p><strong>什么是流量卡</strong></p>\n<p>首先在了解流量卡代理之前，要明白什么是流量卡，流量卡也叫互联网卡【不是物联网卡】，这些互联网卡大部分归属地都是属于海南、广州、重庆、福建等等。拥有号码，有通话、有短信功能，<strong>是运营商正规号码手机卡，特点为月租低流量多。这些流量卡是哪里来的？</strong></p>\n<p>这些卡都是 ** 三大运营商在网上推出的，运营商官方授权的手机卡，** 因为由于当地人口激活数量不足，当地省厅运营商为了提高当地激活数据，所以在网上专属渠道推出这些流量卡的办卡渠道。佣金也是有运营商补贴</p>\n<p><strong>流量卡代理商是怎么回事？</strong></p>\n<p>成为运营商旗下代理商，拥有流量卡分销后台，推广办卡链接，用户办卡后就有佣金抽成，这些佣金均为运营商发放，代理后台可以提现佣金。流程是：<strong>注册后台→分享办卡链接→用户下单办卡激活→后台申请提现。</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://xunlianying.feishu.cn/space/api/box/stream/download/asynccode/?code=MjM4OTJiMjZmOTdmMTMwNGMxNjAxZjVkNWYxZWY2YWFfa1RxSWNKMXFmMWR0d0d4bnhiNDdXNGRSeFlMdE5SaWdfVG9rZW46UWdjUmJzSWZYb0hjbkF4YldDWmN0cmZubnhkXzE3MjM0NDI1MjU6MTcyMzQ0NjEyNV9WNA\" alt=\"\" /></p>\n<p><strong>二、流量卡代理收益如何</strong></p>\n<p>推广电话卡一单永久视市场行情而定，佣金基本为<strong> 8****0-140 左右</strong>，无需承担快递费、卡费，所有的产品由运营商发货，客户商城下单办卡免费。</p>\n<p><strong>以 80 返佣为例，一天 1 张，一个月 30 张，保底就是 2400</strong></p>\n<p><strong>以 100 返佣为例，一天 10 张，一个月 300 张，保底就是 30000</strong></p>\n<p>返佣打款方式：支持【微信、支付宝、银行卡】，<strong>佣金在后台可以直接提现。我们系统</strong>相比市面上的代理系统的<strong>优势在于可以直接提现。</strong></p>\n<p>分享办卡的人越多，收益越多。 无需担心不会做，流量卡的售后问题都是由运营商解决，也会教你们一些推广方法，日入三位数还是很简单。</p>\n<p><img loading=\"lazy\" data-src=\"https://xunlianying.feishu.cn/space/api/box/stream/download/asynccode/?code=NGIwNjc3NDRjY2EyYjFiODYyOTc5OTQyMWFhZTMyNTRfNHVodzVyUVpjMjNobGk1cnRscXRpbW1vall2ZmZMUVZfVG9rZW46T0VyZmJFV01obzRuM2R4dnNUUmN4SjZJbkNoXzE3MjM0NDI1MjU6MTcyMzQ0NjEyNV9WNA\" alt=\"\" /></p>\n<h1 id=\"流量卡代理的特点\"><a class=\"anchor\" href=\"#流量卡代理的特点\">#</a> <strong>流量卡代理的特点：</strong></h1>\n<p>1、占用时间较短，时间自由，和学业主业不冲突，手机就能做。</p>\n<p>2、结算周期快，有秒返和月结</p>\n<p>3、带有一定的复利性质，推广一次，会产生多人办卡。</p>\n<h1 id=\"流量卡代理的玩法\"><a class=\"anchor\" href=\"#流量卡代理的玩法\">#</a> <strong>流量卡代理的玩法：</strong></h1>\n<p>1. 当上家，拉更多的人入场玩，赚取差价，后台有分销系统，可以自由设置下级佣金。</p>\n<p>2. 当引流推广的玩家，获取低成本的流量，赚佣金差。</p>\n<p>互联网很大，你可以利用各个平台免费的流量，通过发图文、做视频或者开直播获取低成本流量，有人办卡即有佣金，无成本获利。</p>\n<p><img loading=\"lazy\" data-src=\"https://xunlianying.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGY0YWE5YTkxNzdjZDJmZDY2YzUwYjNmZjEyNTFjMDBfU2lndTZYQlRRcW1tckxFZE1rM01qTXk4RkRaQVJxcnNfVG9rZW46T3h1Z2JSMENVb1U4ZW54WXlvS2NiZldMbnZjXzE3MjM0NDI1MjU6MTcyMzQ0NjEyNV9WNA\" alt=\"\" /></p>\n<h1 id=\"流量卡代理适合谁\"><a class=\"anchor\" href=\"#流量卡代理适合谁\">#</a> <strong>流量卡代理适合谁：</strong></h1>\n<p>1、没有收入、时间比较充裕想通过副业增加收入的朋友。</p>\n<p>2、有固定收入想多增加一份副业来提高收入的朋友。</p>\n<p>3、拥有自己的资源，想给自己的团队找变现项目的朋友。</p>\n<p>流量卡代理，短期做能增加收入，长期做能增长财富，是一种能持续变现的项目</p>\n<p><img loading=\"lazy\" data-src=\"https://xunlianying.feishu.cn/space/api/box/stream/download/asynccode/?code=MzkwNGZjNGFjYzIwZmJjZTQyODRkZTk3N2U0MzY2NWJfRUl4OXVuMDdxT2I1T0h1dE9pM2lBMVp0R2ZzQkJzOGZfVG9rZW46SURLVmJZYmdMb2hnOWh4akhCYWN1Q3I2bkdnXzE3MjM0NDI1MjU6MTcyMzQ0NjEyNV9WNA\" alt=\"\" /></p>\n<h1 id=\"流量卡代理怎么做\"><a class=\"anchor\" href=\"#流量卡代理怎么做\">#</a> <strong>流量卡代理怎么做：</strong></h1>\n<p>注册网站后台：<a href=\"https://haoka.lot-ml.com/login.html\">https://haoka.lot-ml.com/login.html</a></p>\n<p><strong>注册时填写推荐人手机号，不填写无法注册【15821920781】</strong></p>\n<p>填写好后，后台自动上架卡，不需要你手动铺货</p>\n<p>🔸后台使用说明 <a href=\"https://u3b6zhbgfp.feishu.cn/docx/MoX3ddJFAoqUHDx9fRhcGqejn5f?from=from_copylink\">172 后台使用说明</a></p>\n<p>🔸如何邀请下级和设置佣金 <a href=\"https://u3b6zhbgfp.feishu.cn/docx/U3GkdzJJeoDADrxp1kScWSZunlg?from=from_copylink\">172 平台如何邀请下级</a></p>\n<p>🔸必看 <a href=\"https://u3b6zhbgfp.feishu.cn/docx/Yqpnd9HAYoEf2IxElgAcBTzTniL?from=from_copylink\">流量卡购买须知和注意事项</a></p>\n<blockquote>\n<p>提示：在自己的代理店铺中可以用自己的实名信息下单一张流量卡，也可以获得佣金。</p>\n</blockquote>\n",
            "tags": [
                "HaoKa",
                "172 HaoKa Proxy"
            ]
        },
        {
            "id": "http://example.com/2024/08/12/Internet%20Security/Internet%20Security%20Common%20Tools/",
            "url": "http://example.com/2024/08/12/Internet%20Security/Internet%20Security%20Common%20Tools/",
            "title": "Internet Security Common Tools",
            "date_published": "2024-08-12T01:54:04.676Z",
            "content_html": "<p><div class=\"links\"><div class=\"item\" title=\"qianxin\" style=\"--block-color:#e9546b;\"><a href=\"https://mp.weixin.qq.com/s/qWmHvo8dCuiQrHbo73UFBA\" class=\"image\" data-background-image=\"https://ti.qianxin.com/microapps/home-ti/logo/zh.svg\"></a>\n        <div class=\"info\">\n        <a href=\"https://mp.weixin.qq.com/s/qWmHvo8dCuiQrHbo73UFBA\" class=\"title\">每周高级威胁情报解读(2024.07.26~08.01)</a>\n        <p class=\"desc\">每周高级威胁情报解读</p>\n        </div></div><div class=\"item\" title=\"qianxin\" style=\"--block-color:#e9546b;\"><a href=\"https://ti.qianxin.com/\" class=\"image\" data-background-image=\"https://ti.qianxin.com/microapps/home-ti/logo/zh.svg\"></a>\n        <div class=\"info\">\n        <a href=\"https://ti.qianxin.com/\" class=\"title\">奇安信威胁情报中心</a>\n        <p class=\"desc\">奇安信威胁情报中心</p>\n        </div></div><div class=\"item\" title=\"深信服\" style=\"--block-color:#e9546b;\"><a href=\"https://sec.sangfor.com.cn/wiki-safe-events\" class=\"image\" data-background-image=\"https://sec.sangfor.com.cn/static/img/logo_top.1dcf7e7.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://sec.sangfor.com.cn/wiki-safe-events\" class=\"title\">深信服风险检测平台</a>\n        <p class=\"desc\">深信服风险监测平台</p>\n        </div></div><div class=\"item\" title=\"360\" style=\"--block-color:#e9546b;\"><a href=\"https://mp.weixin.qq.com/s/iRi1qkRG5PEzCu7FrCXZQg\" class=\"image\" data-background-image=\"https://s2.loli.net/2024/08/12/4dfleYOLnsjwAy6.jpg\"></a>\n        <div class=\"info\">\n        <a href=\"https://mp.weixin.qq.com/s/iRi1qkRG5PEzCu7FrCXZQg\" class=\"title\">360 威胁情报中心</a>\n        <p class=\"desc\">360 威胁情报中心</p>\n        </div></div><div class=\"item\" title=\"360\" style=\"--block-color:#e9546b;\"><a href=\"https://ti.360.net/\" class=\"image\" data-background-image=\"https://s5.qhres2.com/static/9b41178ef07e5570.svg\"></a>\n        <div class=\"info\">\n        <a href=\"https://ti.360.net/\" class=\"title\">360 安全大脑</a>\n        <p class=\"desc\">360 安全大脑</p>\n        </div></div><div class=\"item\" title=\"360\" style=\"--block-color:#e9546b;\"><a href=\"https://mp.weixin.qq.com/s/3YkKgUxwl2kiosBIgsE3rw\" class=\"image\" data-background-image=\"https://s2.loli.net/2024/08/12/HUKm7qgXp3ZvV8w.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://mp.weixin.qq.com/s/3YkKgUxwl2kiosBIgsE3rw\" class=\"title\">360 漏洞云</a>\n        <p class=\"desc\">360 漏洞云</p>\n        </div></div></div></p>\n<p><div class=\"links\"><div class=\"item\" title=\"微步在线\" style=\"--block-color:#e9546b;\"><a href=\"https://mp.weixin.qq.com/s/KKPq7XZiImG8dCxAeztK7A\" class=\"image\" data-background-image=\"https://s2.loli.net/2024/08/12/65RpitJbTk7CWlh.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://mp.weixin.qq.com/s/KKPq7XZiImG8dCxAeztK7A\" class=\"title\">微步在线研究响应中心</a>\n        <p class=\"desc\">微步在线研究响应中心</p>\n        </div></div><div class=\"item\" title=\"微步在线\" style=\"--block-color:#e9546b;\"><a href=\"https://x.threatbook.com/\" class=\"image\" data-background-image=\"https://s2.loli.net/2024/08/12/65RpitJbTk7CWlh.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://x.threatbook.com/\" class=\"title\">微步在线</a>\n        <p class=\"desc\">微步在线风险监测平台</p>\n        </div></div><div class=\"item\" title=\"启明星辰\" style=\"--block-color:#e9546b;\"><a href=\"https://www.venustech.com.cn/new_type/aqtg/\" class=\"image\" data-background-image=\"https://s2.loli.net/2024/08/12/Zn8yKzawMESFlhr.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://www.venustech.com.cn/new_type/aqtg/\" class=\"title\">启明星辰</a>\n        <p class=\"desc\">启明星辰风险监测平台</p>\n        </div></div></div></p>\n<p>渗透资料<br />\n链接: <a href=\"https://pan.baidu.com/s/1qnTXKCXBlOHNNBt4kDNMcw?pwd=wy6c\">https://pan.baidu.com/s/1qnTXKCXBlOHNNBt4kDNMcw?pwd=wy6c</a> 提取码: wy6c 复制这段内容后打开百度网盘手机 App，操作更方便哦</p>\n<p>分享文件：AppScan_Standard_v10.5.zip<br />\n 链接：<a href=\"https://pan.xunlei.com/s/VO44P_RISyveJ817hJELmJTJA1?pwd=9nw6#\">https://pan.xunlei.com/s/VO44P_RISyveJ817hJELmJTJA1?pwd=9nw6#</a><br />\n复制这段内容后打开手机迅雷 App，查看更方便</p>\n<p>分享文件：Acunetix-v24.6.240626115-Linux.zip 等<br />\n链接：<a href=\"https://pan.xunlei.com/s/VO44PvBovOQpYS_YLrjiBDraA1?pwd=m77k#\">https://pan.xunlei.com/s/VO44PvBovOQpYS_YLrjiBDraA1?pwd=m77k#</a><br />\n复制这段内容后打开手机迅雷 App，查看更方便</p>\n<p>分享文件：Burp-2024.06 破解汉化版.zip<br />\n 链接：<a href=\"https://pan.xunlei.com/s/VO44Py1WvOQpYS_YLrjiBEsSA1?pwd=r73u#\">https://pan.xunlei.com/s/VO44Py1WvOQpYS_YLrjiBEsSA1?pwd=r73u#</a><br />\n复制这段内容后打开手机迅雷 App，查看更方便</p>\n<p>分享文件：Xray.7z<br />\n 链接：<a href=\"https://pan.xunlei.com/s/VO44R79sNLO2KE8ksGo6aKNvA1?pwd=qkq2#\">https://pan.xunlei.com/s/VO44R79sNLO2KE8ksGo6aKNvA1?pwd=qkq2#</a><br />\n复制这段内容后打开手机迅雷 App，查看更方便</p>\n<p>Goby Red Version<br />\n 链接: <a href=\"https://pan.baidu.com/s/1b7amuPmQkom2rEFeMIjmjg?pwd=p2yd\">https://pan.baidu.com/s/1b7amuPmQkom2rEFeMIjmjg?pwd=p2yd</a> 提取码: p2yd 复制这段内容后打开百度网盘手机 App，操作更方便哦</p>\n<p>160 个 POC<br />\n 分享文件：Goby&amp;Poc.zip<br />\n 链接：<a href=\"https://pan.xunlei.com/s/VO44SCp_TgpFJISbrmPcgN6VA1?pwd=rcua#\">https://pan.xunlei.com/s/VO44SCp_TgpFJISbrmPcgN6VA1?pwd=rcua#</a><br />\n复制这段内容后打开手机迅雷 App，查看更方便</p>\n",
            "tags": [
                "Internet Security",
                "Tools"
            ]
        },
        {
            "id": "http://example.com/2024/08/03/Typescript/Typescript/",
            "url": "http://example.com/2024/08/03/Typescript/Typescript/",
            "title": "Typescript Learning",
            "date_published": "2024-08-03T08:09:34.473Z",
            "content_html": "<h1 id=\"typescript-learning\"><a class=\"anchor\" href=\"#typescript-learning\">#</a> Typescript Learning</h1>\n<h3 id=\"在-vscode-终端中无法直接-npm-ls-g-很有可能是权限不够-以管理员身份启动-vscode-解决\"><a class=\"anchor\" href=\"#在-vscode-终端中无法直接-npm-ls-g-很有可能是权限不够-以管理员身份启动-vscode-解决\">#</a> 在 VSCODE 终端中无法直接 npm ls -g 很有可能是权限不够 以管理员身份启动 VSCODE 解决</h3>\n<h3 id=\"npm-常用命令\"><a class=\"anchor\" href=\"#npm-常用命令\">#</a> npm 常用命令</h3>\n<pre><code>npm ls -g\n</code></pre>\n<p>这样只会查到包 不会查到依赖</p>\n<pre><code>npm ls -g --depth 0\n</code></pre>\n<p>只显示生产环境依赖的包</p>\n<pre><code>npm ls --depth 0 --prod\n</code></pre>\n<p>只显示开发环境依赖的包</p>\n<pre><code>npm ls --depth 0 --dev\n</code></pre>\n<p>我们安装完成 <a href=\"https://so.csdn.net/so/search?q=node&amp;spm=1001.2101.3001.7020\">node</a> 环境后，默认使用的 <a href=\"https://so.csdn.net/so/search?q=%E9%95%9C%E5%83%8F%E6%BA%90&amp;spm=1001.2101.3001.7020\">镜像源</a> 是 npm，但是有时候，需要切换到其他的镜像源安装依赖，这时候我们需要用 nrm（npm registry manager ）进行源的快速切换。</p>\n<h1 id=\"node-使用-nrm-切换镜像源-更快安装依赖\"><a class=\"anchor\" href=\"#node-使用-nrm-切换镜像源-更快安装依赖\">#</a> node 使用 nrm 切换镜像源 - 更快安装依赖</h1>\n<h2 id=\"1安装-nrm\"><a class=\"anchor\" href=\"#1安装-nrm\">#</a> 1. 安装 <a href=\"https://so.csdn.net/so/search?q=nrm&amp;spm=1001.2101.3001.7020\">nrm</a></h2>\n<p>安装 nrm 很简单，使用  <code>npm install -g nrm</code>  可以直接就全局安装 ()<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/NdEhmTPa5vI3lYf.png\" alt=\"\" /><br />\n 安装完成后，我们可以使用  <code>nrm ls</code>  查看所有的可用源，展示的源前有 * 的表示目前正在使用的源。<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/lwBn5fXo9MgNdqc.png\" alt=\"\" /></p>\n<h2 id=\"2切换源\"><a class=\"anchor\" href=\"#2切换源\">#</a> 2. 切换源</h2>\n<p>我们通过  <code>nrm ls</code>  查看目前可用的源后，需要切换到某个源，直接使用  <code>nrm use &lt;源名&gt;</code>  即可完成切换。比如我们需要切换到 taobao 的源直接使用  <code>nrm use taobao</code> <br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/iDqWpIURM9n2AuC.png\" alt=\"\" /></p>\n<h2 id=\"3增加源\"><a class=\"anchor\" href=\"#3增加源\">#</a> 3. 增加源</h2>\n<p>有时我们需要增加一些定制的源，如公司内部自己的私有源，我们使用  <code>nrm add &lt;源名&gt; &lt;源 url&gt;</code>  进行添加。<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/uvs76ydPr1eiQEW.png\" alt=\"\" /></p>\n<h2 id=\"4删除源\"><a class=\"anchor\" href=\"#4删除源\">#</a> 4. 删除源</h2>\n<p>删除不需要的源使用  <code>nrm del &lt;源名&gt;</code>  进行删除<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/zs9ZYStfHnk1OWG.png\" alt=\"\" /><br />\n我们也可以使用  <code>nrm test &lt;源名&gt;</code>  去测试速度，以方便我们选择使用哪个源</p>\n<h3 id=\"因为在此系统上禁止运行脚本解决办法\"><a class=\"anchor\" href=\"#因为在此系统上禁止运行脚本解决办法\">#</a> “因为在此系统上禁止运行脚本” 解决办法</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/493496089\">原地址</a></p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set-ExecutionPolicy RemoteSigned</pre></td></tr></table></figure><p>改回去</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set-ExecutionPolicy Default</pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/kyMZD9n5pUo8Bcx.png\" alt=\"\" /></p>\n<h3 id=\"安装-typescript-并检测-tsc短端口类型脚本编译器\"><a class=\"anchor\" href=\"#安装-typescript-并检测-tsc短端口类型脚本编译器\">#</a> 安装 typescript 并检测 tsc（短端口类型脚本编译器）</h3>\n<pre><code>npm i -g typescript\n</code></pre>\n<pre><code>tsc -v\n</code></pre>\n<h3 id=\"常用-terminal-命令\"><a class=\"anchor\" href=\"#常用-terminal-命令\">#</a> 常用 terminal 命令</h3>\n<pre><code>cd ~\n</code></pre>\n<pre><code class=\"language-Sh\">mkdir #新文件夹名字\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/6JmfTwYqzDoNr1R.png\" alt=\"\" /><br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/wH9lBKIvO4nWixh.png\" alt=\"\" /><br />\n在 vscode 中打开现在的目录文件夹</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>code <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/6HzlByNfnPmwj8X.png\" alt=\"\" /></p>\n<h2 id=\"linux-创建新文件的命令\"><a class=\"anchor\" href=\"#linux-创建新文件的命令\">#</a> linux 创建新文件的命令</h2>\n<ol>\n<li>vi 或 vim</li>\n</ol>\n<p>[root@localhost ~]# vi file1.txt// 直接创建并打开一个文件 file1.txt</p>\n<p>用 vi 编辑器编辑文本后，如果是新创建的文件，默认保存在当前目录下，如果想保存到指定目录下，可以在 vi 编辑器中，按 Esc 键切换到命令模式，然后用 w 命令写到指定目录下的指定新建文件，如写到 /tmp/test.txt 文件，则在 vi 命令模式下输入: w /tmp/test.txt 写好后，在 /tmp 目录下新的文件 test.txt 就被创建了。</p>\n<ol start=\"2\">\n<li>touch</li>\n</ol>\n<p>[root@localhost ~]# touch file2.txt// 创建新的空文件 file2.txt</p>\n<p>touch 的另一个作用是更改一个文件或目录的时间。</p>\n<ol start=\"3\">\n<li>echo</li>\n</ol>\n<p>[root@localhost ~]# echo &quot;this is a new file&quot; &gt; file3.txt// 创建文件 file3.txt 并将 this is a new file 写入</p>\n<p>(说明：使用&gt; 指令覆盖文件原内容并重新输入内容，若文件不存在则创建文件。)</p>\n<p>[root@localhost ~]# echo &quot;add contents&quot; &gt;&gt;file3.txt// 在已存在的文件补充写入新内容 add contents</p>\n<p>(说明：使用&gt;&gt; 指令向文件追加内容，原内容将保存。)</p>\n<p>拓展： Linux 中输出重定向 &gt; 和 &gt;&gt; 的区别，&gt; 是覆盖，&gt;&gt; 是追加</p>\n<blockquote>\n<p>会重写文件，如果文件里面有内容会覆盖。</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>追加文件。也就是如果文件里面有内容会把新内容追加到文件尾</p>\n</blockquote>\n</blockquote>\n<ol start=\"4\">\n<li>less 、more 、cat</li>\n</ol>\n<p>三者都是将文件内容输出到标准输出，其中 less 和 more 可以分页显示，cat 是显示全部。</p>\n<p>三者可以根据已经存在的文件创建新的文件。假设已经存在文件 1.txt。</p>\n<p>cat 1.txt &gt; 2.txt</p>\n<p>less 1.txt &gt; 3.txt</p>\n<p>more 1.txt &gt; 4.txt</p>\n<p>此时创建的文件内容都和 1.txt 中文件内容相同。</p>\n<p>cat 命令可以一次显示整个文件，如果文件比较大，使用不是很方便；适用于文件内容少的情况。</p>\n<p>cat 主要有三大功能：</p>\n<p>1) 一次显示整个文件: cat filename</p>\n<p>2) 从键盘创建一个文件: cat &gt; filename 只能创建新文件，不能编辑已有文件.</p>\n<p>3) 将几个文件合并为一个文件: cat file1 file2 &gt; file</p>\n<p>more 命令可以让屏幕在显示满一屏幕时暂停，此时可按空格健继续显示下一个画面，或按 Q 键停止显示。</p>\n<p>less 命令也可以分页显示文件，和 more 命令的区别就在于它支持上下键卷动屏幕，当结束浏览时，只要在 less 命令的提示符 “:” 下按 Q 键即可。</p>\n<ol start=\"5\">\n<li>cd</li>\n</ol>\n<p>[root@localhost ~]# cd &gt; file3.txt// 创建新的空文件 file3.txt</p>\n<p>[root@localhost ~]# cd &gt;&gt; file4.txt// 创建新的空文件 file3.txt</p>\n<p>cd 最主要的作用是切换目录，在 cd 后面跟 &gt; 或 &gt;&gt; 再加上文件名就可以创建一个内容为空的文件。它和 echo 的区别之处在于 echo 可写文件内容，而 cd 并不能。<br />\n————————————————<br />\n 版权声明：本文为 CSDN 博主「csdnlzy」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>\n<h3 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h3>\n<p><a href=\"http://t.zoukankan.com/macrored-p-11415741.html\">原文地址</a></p>\n<h3 id=\"使用-typesript-编译器使得我们可以编译-indexts\"><a class=\"anchor\" href=\"#使用-typesript-编译器使得我们可以编译-indexts\">#</a> 使用 typesript 编译器使得我们可以编译 index.ts</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tsc index.ts</pre></td></tr></table></figure><p>会出现一个 index.js 就编译好了</p>\n<h2 id=\"创建-typescript-配置文件\"><a class=\"anchor\" href=\"#创建-typescript-配置文件\">#</a> 创建 Typescript 配置文件</h2>\n<pre><code>tsc --init\n</code></pre>\n<h3 id=\"在-vscode-中搜索文件\"><a class=\"anchor\" href=\"#在-vscode-中搜索文件\">#</a> 在 VSCODE 中搜索文件</h3>\n<p>ctrl + p</p>\n<h3 id=\"创建类\"><a class=\"anchor\" href=\"#创建类\">#</a> 创建类</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/dlzeJytuF5UL9Dg.png\" alt=\"\" /><br />\n这是 Typescript 的初始化属性方法<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/z4sZwFr8vMdUWTO.png\" alt=\"\" /><br />\n这是 Javascript 的<br />\n声明 id/owner/balance 的类型 在 JavaScript 中不存在</p>\n<h3 id=\"报错-throw-new-error\"><a class=\"anchor\" href=\"#报错-throw-new-error\">#</a> 报错: throw new Error</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/3IMogFkEQ5YXCKc.png\" alt=\"\" /><br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/p965kdPCq3AhgNG.png\" alt=\"\" /></p>\n<h2 id=\"一步编译并运行\"><a class=\"anchor\" href=\"#一步编译并运行\">#</a> 一步编译并运行</h2>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/47Jc5fFvxyLIrp9.png\" alt=\"\" /><br />\nmac 下的<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/ZERTsi7vNQJ6dYX.png\" alt=\"\" /></p>\n<p>Linux 下的</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tsc <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">node</span> ~</pre></td></tr></table></figure><p>Windows 下的<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/dD4KO2ZIYiGsmNR.png\" alt=\"\" /></p>\n<h3 id=\"只读修饰符-在类型声明的时候-加上-readonly-只能在构造函数内设置它\"><a class=\"anchor\" href=\"#只读修饰符-在类型声明的时候-加上-readonly-只能在构造函数内设置它\">#</a> 只读修饰符 在类型声明的时候 加上 readonly (只能在构造函数内设置它)</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/7qfzeILgmMy435s.png\" alt=\"\" /></p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/MkJVPURgiZKHaxs.png\" alt=\"\" /></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 继承 inheritance 即类中共同的属性 防止重复</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 注意这里不能 return 任何 因为要返回一个实例对象 object 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">fullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Walking'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> studentId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 这里使用访问修饰符时：public /private 我们本质上是在创建一个参数属性 所以类型脚本编译器将创建此名称的属性并为我们初始化它 这里我们不想用公共修饰符 public 因为之前已经在 Person 里声明且初始化过了</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span><span class=\"token comment\">// 在 ts 中 有一个特殊的关键字 super 去让我们来参考 reference 基础的类 basic class</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">takeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Taking a test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'john@gmail.com'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"折叠代码块\"><a class=\"anchor\" href=\"#折叠代码块\">#</a> 折叠代码块</h3>\n<p>ctrl + k + 0 折叠全部<br />\n ctrl + k + j 展开全部</p>\n<p>ctrl + shift + [ 折叠选中<br />\n \\ 反义符号<br />\n ctrl + shift + ] 展开选中</p>\n<h3 id=\"属性-properties-运算符-operator\"><a class=\"anchor\" href=\"#属性-properties-运算符-operator\">#</a> 属性 Properties 运算符 Operator</h3>\n<h3 id=\"这些东西非常有用-且内置在-typescript-中\"><a class=\"anchor\" href=\"#这些东西非常有用-且内置在-typescript-中\">#</a> 这些东西非常有用 且内置在 Typescript 中</h3>\n<p><a href=\"typescriptlang.org/docs/handbook/utility-types.html\">原链接</a></p>\n<h3 id=\"65-至-68-需复习记得写笔记-78-属性装饰器\"><a class=\"anchor\" href=\"#65-至-68-需复习记得写笔记-78-属性装饰器\">#</a> 6.5 至 6.8 需复习记得写笔记 7.8 属性装饰器</h3>\n<h3 id=\"展开运算符\"><a class=\"anchor\" href=\"#展开运算符\">#</a> 展开运算符 ...</h3>\n<p><a href=\"https://www.jianshu.com/p/a432a9e78949\">展开运算符</a></p>\n<h3 id=\"ctrl-移动到新文件或者删除模块\"><a class=\"anchor\" href=\"#ctrl-移动到新文件或者删除模块\">#</a> ctrl + . 移动到新文件或者删除模块</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/JC6UtTRiW9IGHbY.png\" alt=\"\" /></p>\n<h3 id=\"lodash-流行的应用程序\"><a class=\"anchor\" href=\"#lodash-流行的应用程序\">#</a> lodash 流行的应用程序</h3>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/MfSojCyk2XlpeY4.png\" alt=\"\" /><br />\n因为 lodash 纯纯 JS 所以需要类型注释 使得构建应用程序更快<br />\n所以再装一个类型注释库 @types 是很流行的 JS 类型注释库 里面有所有 JS 包的类型注释</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-D</span> @types/lodash</pre></td></tr></table></figure><p>-D 开发环境安装 也就是不会出现在上线环境<br />\n @types/ + 上 JS 包<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/UNFM5fXyRi2KSPh.png\" alt=\"Pasted image 20230104230218\" /><br />\n 这样就可以出现提示了</p>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/bPVMUXvisc7OryI.png\" alt=\"Pasted image 20230104230401\" /><br />\n 包和声明文件一般不会分开</p>\n<h2 id=\"react\"><a class=\"anchor\" href=\"#react\">#</a> React</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx create-react-app reminders-app <span class=\"token parameter variable\">--template</span> typescript</pre></td></tr></table></figure><p>创建一个叫 reminders-app 的 react 且使用 typescript</p>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/Wh9QGLDtRdnuBEV.png\" alt=\"Pasted image 20230104233058\" /></p>\n<pre><code>button.btn.btn-primary\n</code></pre>\n<p>创建一个 button className 为 btn btn-primary</p>\n<p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/dG9w5zgelPZoJq4.png\" alt=\"Pasted image 20230104233712\" /></p>\n<p>还是一样的 ctrl + .<br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/UGcnwb4qm5vMIsE.png\" alt=\"Pasted image 20230104234206\" /><br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/08/09/H3at5vrYZqQJVdz.png\" alt=\"Pasted image 20230104234224\" /><br />\n 就会自动创建了</p>\n",
            "tags": [
                "Typescript"
            ]
        },
        {
            "id": "http://example.com/2024/08/03/%E5%8F%8B%E9%93%BE%E6%B7%BB%E5%8A%A0/",
            "url": "http://example.com/2024/08/03/%E5%8F%8B%E9%93%BE%E6%B7%BB%E5%8A%A0/",
            "title": "友链添加",
            "date_published": "2024-08-03T05:56:15.391Z",
            "content_html": "<h1 id=\"查看友链\"><a class=\"anchor\" href=\"#查看友链\">#</a> 查看友链</h1>\n<p><div class=\"links\"><div class=\"item\" title=\"Noir\" style=\"--block-color:#e9546b;\"><a href=\"/friends/\" class=\"image\" data-background-image=\"https://2.gravatar.com/avatar/6f9c7742c6e97f0e83534c95c4088a2fec3aade410c8b72622137a876e488644\"></a>\n        <div class=\"info\">\n        <a href=\"/friends/\" class=\"title\">查看友链</a>\n        <p class=\"desc\">Noir's Blog & Computer Notes</p>\n        </div></div></div></p>\n<h1 id=\"申请方法\"><a class=\"anchor\" href=\"#申请方法\">#</a> 申请方法</h1>\n<ul>\n<li>添加本站后，在下方 Post 处留言，格式如下</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">site</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#网站的名字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#您的名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#您的网址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">desc</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#简短描述</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#一张图片</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#方块颜色</span></pre></td></tr></table></figure>",
            "tags": [
                "FriendChainAdd",
                "FriendChainAdd"
            ]
        },
        {
            "id": "http://example.com/2024/08/02/Web3/Solidity/",
            "url": "http://example.com/2024/08/02/Web3/Solidity/",
            "title": "Solidity",
            "date_published": "2024-08-02T06:56:14.159Z",
            "content_html": "<h1 id=\"solidity\"><a class=\"anchor\" href=\"#solidity\">#</a> Solidity</h1>\n<p><div class=\"links\"><div class=\"item\" title=\"Solidity Academy\" style=\"--block-color:#e9546b;\"><a href=\"https://www.wtf.academy/\" class=\"image\" data-background-image=\"https://www.wtf.academy/img/logo.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://www.wtf.academy/\" class=\"title\">Solidity Academy</a>\n        <p class=\"desc\">Web3 Academy</p>\n        </div></div><div class=\"item\" title=\"Remix\" style=\"--block-color:#9d5b8b;\"><a href=\"https://remix.ethereum.org/\" class=\"image\" data-background-image=\"/assets/404.png\"></a>\n        <div class=\"info\">\n        <a href=\"https://remix.ethereum.org/\" class=\"title\">Remix</a>\n        <p class=\"desc\">以太链上的合约开发 IDE</p>\n        </div></div></div></p>\n",
            "tags": [
                "Web3",
                "Web3",
                "Solidity"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/",
            "title": "选择排序",
            "date_published": "2024-07-31T14:16:49.535Z",
            "content_html": "",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "title": "计数排序",
            "date_published": "2024-07-31T14:16:49.529Z",
            "content_html": "<pre><code class=\"language-c++\">void counting_sort()\n&#123;\n    int sorted[N];\n    int maxv = a[0];\n    for (int i = 1; i &lt; n; i ++ )\n        if (maxv &lt; a[i])\n            maxv = a[i];\n    int count[maxv+1];\n    for (int i = 0; i &lt; n; i ++ ) count[a[i]] ++ ;\n    for (int i = 1; i &lt;= maxv; i ++ ) count[i] += count[i-1];\n    for (int i = n-1; i &gt;= 0; i -- )\n    &#123;\n        sorted[count[a[i]]-1] = a[i];\n        count[a[i]] -- ;\n    &#125;\n    for (int i = 0; i &lt; n; i ++ ) a[i] = sorted[i];\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%A1%B6%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%A1%B6%E6%8E%92%E5%BA%8F/",
            "title": "桶排序",
            "date_published": "2024-07-31T14:16:49.523Z",
            "content_html": "<h6 id=\"基数排序是桶排序的特例优势是可以处理浮点数和负数劣势是还要配合别的排序函数\"><a class=\"anchor\" href=\"#基数排序是桶排序的特例优势是可以处理浮点数和负数劣势是还要配合别的排序函数\">#</a> （基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）</h6>\n<pre><code class=\"language-c++\">vector&lt;int&gt; bucketSort(vector&lt;int&gt;&amp; nums) &#123;\n    int n = nums.size();\n    int maxv = *max_element(nums.begin(), nums.end());\n    int minv = *min_element(nums.begin(), nums.end());\n    int bs = 1000;\n    int m = (maxv-minv)/bs+1;\n    vector&lt;vector&lt;int&gt; &gt; bucket(m);\n    for (int i = 0; i &lt; n; ++i) &#123;\n        bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n    &#125;\n    int idx = 0;\n    for (int i = 0; i &lt; m; ++i) &#123;\n        int sz = bucket[i].size();\n        bucket[i] = quickSort(bucket[i]);\n        for (int j = 0; j &lt; sz; ++j) &#123;\n            nums[idx++] = bucket[i][j];\n        &#125;\n    &#125;\n    return nums;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/",
            "title": "插入排序",
            "date_published": "2024-07-31T14:16:49.518Z",
            "content_html": "<pre><code class=\"language-c++\">void insert_sort()\n&#123;\n    for (int i = 1; i &lt; n; i ++ )\n    &#123;\n        int x = a[i];\n        int j = i-1;\n\n        while (j &gt;= 0 &amp;&amp; x &lt; a[j])\n        &#123;\n            a[j+1] = a[j];\n            j -- ;\n        &#125;\n        a[j+1] = x;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%BF%AB%EF%BC%89/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%BF%AB%EF%BC%89/",
            "title": "快速排序（最快）",
            "date_published": "2024-07-31T14:16:49.512Z",
            "content_html": "<pre><code class=\"language-c++\">void quick_sort(int l, int r)\n&#123;\n    if (l &gt;= r) return ;\n\n    int x = a[l+r&gt;&gt;1], i = l-1, j = r+1;\n    while (i &lt; j)\n    &#123;\n        while (a[++ i] &lt; x);\n        while (a[-- j] &gt; x);\n        if (i &lt; j) swap(a[i], a[j]);\n    &#125;\n    sort(l, j), sort(j+1, r);\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/",
            "title": "归并排序",
            "date_published": "2024-07-31T14:16:49.506Z",
            "content_html": "<pre><code class=\"language-c++\">void merge_sort(int l, int r)\n&#123;\n    if (l &gt;= r) return;\n    int temp[N];\n    int mid = l+r&gt;&gt;1;\n    merge_sort(l, mid), merge_sort(mid+1, r);\n    int k = 0, i = l, j = mid+1;\n    while (i &lt;= mid &amp;&amp; j &lt;= r)\n    &#123;\n        if (a[i] &lt; a[j]) temp[k ++ ] = a[i ++ ];\n        else temp[k ++ ] = a[j ++ ];\n\n    &#125;\n    while (i &lt;= mid) temp[k ++ ] = a[i ++ ];\n    while (j &lt;= r) temp[k ++ ] = a[j ++ ];\n    for (int i = l, j = 0; i &lt;= r; i ++ , j ++ ) a[i] = temp[j];\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/",
            "title": "希尔排序",
            "date_published": "2024-07-31T14:16:49.500Z",
            "content_html": "<pre><code class=\"language-c++\">void shell_sort()\n&#123;\n    for (int gap = n &gt;&gt; 1; gap; gap &gt;&gt;= 1)\n    &#123;\n        for (int i = gap; i &lt; n; i ++ )\n        &#123;\n            int x = a[i];\n            int j;\n            for (j = i; j &gt;= gap &amp;&amp; a[j-gap] &gt; x; j -= gap)\n                a[j] = a[j-gap];\n            a[j] = x;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/",
            "title": "堆排序",
            "date_published": "2024-07-31T14:16:49.493Z",
            "content_html": "<p>（须知此排序为使用了模拟堆，为了使最后一个非叶子节点的编号为 n/2，数组编号从 1 开始)</p>\n<pre><code class=\"language-c++\">void down(int u)\n&#123;\n    int t = u;\n    if (u&lt;&lt;1 &lt;= n &amp;&amp; h[u&lt;&lt;1] &lt; h[t]) t = u&lt;&lt;1;\n    if ((u&lt;&lt;1|1) &lt;= n &amp;&amp; h[u&lt;&lt;1|1] &lt; h[t]) t = u&lt;&lt;1|1;\n    if (u != t)\n    &#123;\n        swap(h[u], h[t]);\n        down(t);\n    &#125;\n&#125;\n\nint main()\n&#123;\n    for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; h[i];\n    for (int i = n/2; i; i -- ) down(i);\n    while (true)\n    &#123;\n        if (!n) break;\n        cout &lt;&lt; h[1] &lt;&lt; ' ';\n        h[1] = h[n];\n        n -- ;\n        down(1);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "title": "基数排序",
            "date_published": "2024-07-31T14:16:49.487Z",
            "content_html": "<pre><code class=\"language-c++\">int maxbit()\n&#123;\n    int maxv = a[0];\n    for (int i = 1; i &lt; n; i ++ )\n        if (maxv &lt; a[i])\n            maxv = a[i];\n    int cnt = 1;\n    while (maxv &gt;= 10) maxv /= 10, cnt ++ ;\n\n    return cnt;\n&#125;\nvoid radixsort()\n&#123;\n    int t = maxbit();\n    int radix = 1;\n\n    for (int i = 1; i &lt;= t; i ++ )\n    &#123;\n        for (int j = 0; j &lt; 10; j ++ ) count[j] = 0;\n        for (int j = 0; j &lt; n; j ++ )\n        &#123;\n            int k = (a[j] / radix) % 10;\n            count[k] ++ ;\n        &#125;\n        for (int j = 1; j &lt; 10; j ++ ) count[j] += count[j-1];\n        for (int j = n-1; j &gt;= 0; j -- )\n        &#123;\n            int k = (a[j] / radix) % 10;\n            temp[count[k]-1] = a[j];\n            count[k] -- ;\n        &#125;\n        for (int j = 0; j &lt; n; j ++ ) a[j] = temp[j];\n        radix *= 10;\n    &#125;\n\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/",
            "title": "冒泡排序",
            "date_published": "2024-07-31T14:16:49.482Z",
            "content_html": "<pre><code class=\"language-c++\">void bubble_sort()\n&#123;\n    for (int i = n-1; i &gt;= 1; i -- )\n    &#123;\n        bool flag = true;\n        for (int j = 1; j &lt;= i; j ++ )\n            if (a[j-1] &gt; a[j])\n            &#123;\n                swap(a[j-1], a[j]);\n                flag = false;\n            &#125;\n        if (flag) return;\n    &#125;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/Classification/",
            "url": "http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/Classification/",
            "title": "十大排序算法总结",
            "date_published": "2024-07-31T14:16:49.474Z",
            "content_html": "<h3 id=\"十大排序算法总结\"><a class=\"anchor\" href=\"#十大排序算法总结\">#</a> <a href=\"https://www.acwing.com/solution/content/26513/\">十大排序算法总结</a></h3>\n<p>排序算法的分类：<br />\n1. 插入：[[插入排序]]，折半插入，[[希尔排序]]<br />\n 2. 交换：[[冒泡排序]]，[[快速排序（最快）]]<br />\n 3. 选择：[[选择排序]]，[[堆排序]]<br />\n 4. 归并：[[归并排序]]（不只二路归并）<br />\n5. 基数：[[基数排序]]</p>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Top 10 Sorting Algorithm"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20845.%20%E5%85%AB%E6%95%B0%E7%A0%81/",
            "url": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20845.%20%E5%85%AB%E6%95%B0%E7%A0%81/",
            "title": "AcWing 845. 八数码",
            "date_published": "2024-07-31T14:16:49.432Z",
            "content_html": "<h3 id=\"八数码-bfs\"><a class=\"anchor\" href=\"#八数码-bfs\">#</a> <a href=\"https://www.acwing.com/problem/content/847/\">八数码 - BFS</a></h3>\n<pre><code class=\"language-c++\">\n</code></pre>\n<p>![[Pasted image 20221227151816.png]]</p>\n<pre><code class=\"language-c++\">\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Search & Graph Theory"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20844.%20%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%88BFS%EF%BC%89/",
            "url": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20844.%20%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%88BFS%EF%BC%89/",
            "title": "AcWing 844. 走迷宫（BFS）",
            "date_published": "2024-07-31T14:16:49.427Z",
            "content_html": "<h3 id=\"走迷宫-bfs\"><a class=\"anchor\" href=\"#走迷宫-bfs\">#</a> <a href=\"https://www.acwing.com/problem/content/846/\">走迷宫 - BFS</a></h3>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\ntypedef pair&lt;int, int&gt; PII;\n\nconst int N = 110;\n\nint n, m;\nint g[N][N];\nint d[N][N];\nPII q[N * N];\n\nint bfs()&#123;\n\tint hh = 0, tt = 0;\n\tq[0] = &#123;0, 0&#125;;\n\tmemset(d, -1, sizeof d);\n\td[0][0] = 0;\n\tint dx[4] = &#123;-1, 0, 1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;;\n\twhile(hh &lt;= tt)&#123;\n\t//while 队列不空\n\t\tauto t = q[hh++];\n\t\t//每一次取出来队头元素 即 t = 队头\n\t\tfor(int i = 0; i &lt; 4; i++)&#123;\n\t\t\tint x = t.first + dx[i], y = t.second + dy[i];\n\t\t\t//沿着这个方向走\n\t\t\tif(x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1)&#123;\n\t\t\t\t//并且在边界内的话                      并且是空地可以走   并且没有走过的话\n\t\t\t\t//如果不是第一次搜到即走过一次了的话就不是BFS 也就不是最短距离\n\t\t\t\t//注意这里是一圈一圈搜的\n\t\t\t\td[x][y] = d[t.first][t.second] + 1;\n\t\t\t\tq[++ tt] = &#123;x, y&#125;;\n\t\t\t\t//将这个点加入队列\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn d[n - 1][m - 1];\n\t//输出右下角这个点的距离\n&#125;\n\nint main()&#123;\n\tcin &gt;&gt; n &gt;&gt; m;\n\tfor(int i = 0; i &lt; n; i++)\n\t\tfor(int j = 0; j &lt; m; j++)\n\t\t\tcin &gt;&gt; g[i][j];\n\tcout &lt;&lt; bfs() &lt;&lt; endl;\n\treturn 0;\n&#125;\n</code></pre>\n<p>![[Pasted image 20221227150900.png]]<br />\n![[Pasted image 20221227151607.png]]<br />\n![[Pasted image 20221227151454.png]]</p>\n<h2 id=\"只有当所有边的权重即边权都是1的时候才可以用bfs求最短路一般情况下都要用专门的最短路算法求最短路\"><a class=\"anchor\" href=\"#只有当所有边的权重即边权都是1的时候才可以用bfs求最短路一般情况下都要用专门的最短路算法求最短路\">#</a> 只有当所有边的权重（即边权）都是 1 的时候才可以用 BFS 求最短路一般情况下都要用专门的最短路算法求最短路</h2>\n<pre><code class=\"language-c++\">//dp问题可以被看成是一种特殊的最短路问题 即最短路问题是包含dp问题的 即dp问题就是没有环的最短路\n//深搜可以保证可以搜到终点 但是不能保证搜到的路径是最短的\n\n//不是所有的最短路问题都可以用bfs来做 只有当所有边的权重都一样的时候 比如说边权=1时 可以用bfs\n//一般情况下都要用专门的最短路算法求最短路\n\n//dp问题肯定不会用最短路算法来求 因为最短路算法的时间复杂度比较高 dp问题的时间复杂度比较低\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;queue&gt;\n\n\nusing namespace std;\n\nconst int N = 110;\n\n\ntypedef pair&lt;int, int&gt; PII;\n\nint n, m;\nint g[N][N];\nint d[N][N];\n//如果需要记录路径 只需要记录一下哪儿个点是从哪儿个点拓展出来的就可以了\nPII q[N * N], Prev[N][N];\n\nint bfs()&#123;\n    int hh = 0, tt = 0;\n    q[0] = &#123;0, 0&#125;;\n    \n    memset(d, -1, sizeof d);//将所有距离初始化成-1 表示没有走过\n    d[0][0] = 0;//d第0初始化成0 表示已经走过了\n    \n    //可以用向量表示往上下左右走\n    //上 (-1, 0) 右 (0, 1) 下 (1, 0) 左 (0, -1)\n    \n    //即  -1         0         1         0\n    //        0         1         0         -1\n    int dx[4] = &#123;-1, 0, 1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;;\n    \n    while(hh &lt;= tt)&#123;\n        auto t = q[hh++];//每次取出队头\n        \n        for(int i = 0; i &lt; 4; i++)&#123;\n            int x = t.first + dx[i], y = t.second + dy[i];\n            if(x &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] == 0 &amp;&amp; d[x][y] == -1)&#123;\n            //这个判断的意思是 如果沿着这个边界走的话是在边界以内的 并且这个点是可以走的 即 != 0 并且这个点没有走过 即 d[x][y] == -1\n                d[x][y] = d[t.first][t.second] + 1;//BFS只有第一次搜到的才是最短距离 如果不是第一次搜到那就不是最短距离\n                Prev[x][y] = t;\n                q[++ tt] = &#123;x, y&#125;;\n                //新的 x 新的 y 塞进队列\n            &#125;\n        &#125;\n    &#125;\n    \n    //输出路径\n    int x = n - 1, y = m - 1;\n    while(x || y)&#123;\n        // cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; endl;\n        auto t = Prev[x][y];\n        x = t.first, y = t.second;\n    &#125;\n    \n    return d[n - 1][m - 1];\n&#125;\n\n\nint main()&#123;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 0; i &lt; n; i++)\n        for(int j = 0; j &lt; m; j++)\n            cin &gt;&gt; g[i][j];\n            \n    cout &lt;&lt; bfs() &lt;&lt; endl;\n    \n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Search & Graph Theory"
            ]
        },
        {
            "id": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20843.%20n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2024/07/31/Algorithm/Search%20&%20Graph%20Theory/AcWing%20843.%20n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/",
            "title": "AcWing 843. n-皇后问题",
            "date_published": "2024-07-31T14:16:49.422Z",
            "content_html": "<h3 id=\"n皇后问题-dfs\"><a class=\"anchor\" href=\"#n皇后问题-dfs\">#</a> <a href=\"https://www.acwing.com/problem/content/845/\">N 皇后问题 - DFS</a></h3>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 20;\n\nint n;\nchar g[N][N];\nbool col[N], dg[N], udg[N];\n\nvoid dfs(int u)&#123;\n\tif(u == n)&#123;\n\t\tfor(int i = 0; i &lt; n; i++) puts(g[i]);\n\t\tputs(&quot;&quot;);\n\t\treturn;\n\t&#125;\n\tfor(int i = 0; i &lt; n; i++)&#123;\n\t\tif(!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i])&#123;\n\t\t//这个 偏移量 相当于 把 负数和 这个数 简单的映射了 一下\n\t\t\tg[u][i] = 'Q';\n\t\t\tcol[i] = dg[u + i] = udg[n - u + i] = true;\n\t\t\tdfs(u + 1);\n\t\t\tcol[i] = dg[u + i] = udg[n - u + i] = false;\n\t\t\tg[u][i] = '.';\n\t\t&#125;\n\t&#125;\n&#125;\nint main()&#123;\n\tcin &gt;&gt; n;\n\tfor(int i = 0; i &lt; n; i++)\n\t\tfor(int j = 0; j &lt; n; j++)\n\t\t\tg[i][j] = '.';\n\tdfs(0);\n\treturn 0;\n&#125;\n</code></pre>\n<h3 id=\"为什么求截距就可以判断两个点在一条对角线或者反对角线呢\"><a class=\"anchor\" href=\"#为什么求截距就可以判断两个点在一条对角线或者反对角线呢\">#</a> 为什么求截距就可以判断两个点在一条对角线或者反对角线呢？</h3>\n<pre><code>因为b可以唯一确定一条直线，在同一条直线上面b都是相同的，所以以b为下标是可以繁殖对角线和反对角线上面放皇后的\n</code></pre>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 20;\nint n;\nchar g[N][N];\nbool row[N], col[N], dg[N], udg[N];\n\nvoid dfs(int x, int y, int s)&#123;\n\tif(y == n)&#123;\n\t\ty = 0;\n\t\tx ++;\n\t&#125;\n\tif(x == n)&#123;\n\t\tif(s == n)&#123;\n\t\t\tfor(int i = 0; i &lt; n; i++) puts(g[i]);\n\t\t\tputs(&quot;&quot;);\n\t\t&#125;\n\t\treturn;\n\t&#125;\n\t//不放皇后\n\tdfs(x, y + 1, s);\n\t//放皇后\n\tif(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp;!udg[x - y + n])&#123;\n\t\tg[x][y] = 'Q';\n\t\trow[x] = col[y] = dg[x + y] = udg[x - y + n] = true;\n\t\tdfs(x, y + 1, s + 1);\n\t\trow[x] = col[y] = dg[x + y] = udg[x - y + n] = false;\n\t\tg[x][y] = '.';\n\t&#125;\n&#125;\nint main()&#123;\n\tcin &gt;&gt; n;\n\tfor(int i = 0; i &lt; n; i++)&#123;\n\t\tfor(int j = 0; j &lt; n; j++)&#123;\n\t\t\tg[i][j] = '.';\n\t\t&#125;\n\t&#125;\n\tdfs(0, 0, 0);\n\treturn 0;\n&#125;\n</code></pre>\n<p><a href=\"https://b23.tv/EtnaOZ3\">懒猫老师 - C 语言 - 递归函数 - 八皇后问题 (搜索，回溯)- 哔哩哔哩</a></p>\n<p>&lt;iframe src=&quot;<a href=\"http://player.bilibili.com/player.html?aid=76265320&amp;bvid=BV1wJ411U7Gy&amp;cid=130453660&amp;page=1\">http://player.bilibili.com/player.html?aid=76265320&amp;bvid=BV1wJ411U7Gy&amp;cid=130453660&amp;page=1</a>&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;500px&quot; height=&quot;500px&quot;&gt; &lt;/iframe&gt;</p>\n<p>![[Pasted image 20221225161908.png]]</p>\n<pre><code class=\"language-c++\">//枚举方法1\n// #include &lt;iostream&gt;\n\n// using namespace std;\n\n// const int N = 20;\n\n// int n;\n// char g[N][N];\n// bool col[N], dg[N], udg[N];\n\n// void dfs(int u)&#123;\n//     if(u == n)&#123;\n//         for(int i = 0;i &lt; n; i++) puts(g[i]);\n//         puts(&quot;&quot;);\n//         return;\n//     &#125;\n    \n//     for(int i = 0; i &lt; n; i++)\n//         if(!col[i] &amp;&amp; !dg[u+ i] &amp;&amp; !udg[n - u + i])&#123;//剪枝\n//             g[u][i] = 'Q';\n//             col[i] = dg[u + i] = udg[n - u + i] = true;//截距如下\n//             //y = x + b                                                                                            y = -x + b\n//             //b = y - x 因为 y - x 是负数，而数组下标不能为负数 所以给他加个偏移量 即 b = y - x + n                b =  y + x\n//             dfs(u + 1);\n//             col[i] = dg[u + i] = udg[n - u + i] = false;//恢复现场\n//             g[u][i] = '.';\n//         &#125;\n// &#125;\n\n// int main()&#123;\n//     cin &gt;&gt; n;\n//     for(int i = 0; i &lt; n; i++)\n//         for(int j = 0; j &lt; n; j++)\n//             g[i][j] = '.';\n            \n//     dfs(0);\n    \n//     return 0;\n// &#125;\n\n\n\n//枚举方法2\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nconst int N = 20;\n\nint n;\nchar g[N][N];\nbool row[N], col[N], dg[N], udg[N];\n\nvoid dfs(int x, int y, int s)&#123;\n    if(y == n) y = 0, x++;\n    \n    if(x == n)&#123;\n        if(s == n)&#123;\n            for(int i = 0; i &lt; n; i++) puts(g[i]);\n            puts(&quot;&quot;);\n        &#125;\n        \n        return;\n        //这边return下面那个dfs也会return出去到dfs下面的if去的\n    &#125;\n    \n    //不放皇后\n    dfs(x, y + 1, s);\n    \n    //放皇后\n    if(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n])&#123;\n        g[x][y] = 'Q';\n        row[x] = col[y] = dg[x + y] = udg[x - y + n] = true;\n        dfs(x, y + 1, s + 1);\n        row[x] = col[y] = dg[x + y] = udg[x - y + n] = false;\n        g[x][y] = '.';\n    &#125;\n&#125;\n\nint main()&#123;\n    cin &gt;&gt; n;\n    for(int i = 0; i &lt; n; i++)\n        for(int j = 0; j &lt; n; j ++)\n            g[i][j] = '.';\n            \n    dfs(0, 0, 0);\n    \n    return 0;\n&#125;\n</code></pre>\n",
            "tags": [
                "Algorithm",
                "Algorithm, Search & Graph Theory"
            ]
        }
    ]
}