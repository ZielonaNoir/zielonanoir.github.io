<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>CygneNoir</title>
    <subtitle></subtitle>
    <icon>http://example.com/assets/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>CygneNoir</name>
    </author>
    <updated>2024-08-03T08:09:34.473Z</updated>
    <entry>
        <id>http://example.com/2024/08/03/Typescript/Typescript/</id>
        <title>Typescript Learning</title>
        <link rel="alternate" href="http://example.com/2024/08/03/Typescript/Typescript/"/>
        <content type="html">&lt;p&gt;  
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://example.com/image.jpg&#34; alt=&#34;Alt text&#34;&gt;

&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/NdEhmTPa5vI3lYf.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wxls-cms.oss-cn-hangzhou.aliyuncs.com/online/2024-04-18/218da022-f4bf-456a-99af-5cb8e157f7b8.jpg&#34;&gt;https://wxls-cms.oss-cn-hangzhou.aliyuncs.com/online/2024-04-18/218da022-f4bf-456a-99af-5cb8e157f7b8.jpg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wxls-cms.oss-cn-hangzhou.aliyuncs.com/online/2024-04-18/218da022-f4bf-456a-99af-5cb8e157f7b8.jpg&#34; class=&#34;&#34; width=&#34;200&#34; height=&#34;400&#34; title=&#34;vi-vim-cheat-sheet&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;typescript-learning&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typescript-learning&#34;&gt;#&lt;/a&gt; Typescript Learning&lt;/h1&gt;
&lt;h3 id=&#34;在-vscode-终端中无法直接-npm-ls-g-很有可能是权限不够-以管理员身份启动-vscode-解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-vscode-终端中无法直接-npm-ls-g-很有可能是权限不够-以管理员身份启动-vscode-解决&#34;&gt;#&lt;/a&gt; 在 VSCODE 终端中无法直接 npm ls -g 很有可能是权限不够 以管理员身份启动 VSCODE 解决&lt;/h3&gt;
&lt;h3 id=&#34;npm-常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-常用命令&#34;&gt;#&lt;/a&gt; npm 常用命令&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm ls -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样只会查到包 不会查到依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm ls -g --depth 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只显示生产环境依赖的包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm ls --depth 0 --prod
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只显示开发环境依赖的包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm ls --depth 0 --dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们安装完成 &lt;a href=&#34;https://so.csdn.net/so/search?q=node&amp;amp;spm=1001.2101.3001.7020&#34;&gt;node&lt;/a&gt; 环境后，默认使用的 &lt;a href=&#34;https://so.csdn.net/so/search?q=%E9%95%9C%E5%83%8F%E6%BA%90&amp;amp;spm=1001.2101.3001.7020&#34;&gt;镜像源&lt;/a&gt; 是 npm，但是有时候，需要切换到其他的镜像源安装依赖，这时候我们需要用 nrm（npm registry manager ）进行源的快速切换。&lt;/p&gt;
&lt;h1 id=&#34;node-使用-nrm-切换镜像源-更快安装依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node-使用-nrm-切换镜像源-更快安装依赖&#34;&gt;#&lt;/a&gt; node 使用 nrm 切换镜像源 - 更快安装依赖&lt;/h1&gt;
&lt;h2 id=&#34;1安装-nrm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1安装-nrm&#34;&gt;#&lt;/a&gt; 1. 安装 &lt;a href=&#34;https://so.csdn.net/so/search?q=nrm&amp;amp;spm=1001.2101.3001.7020&#34;&gt;nrm&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装 nrm 很简单，使用  &lt;code&gt;npm install -g nrm&lt;/code&gt;  可以直接就全局安装 ()&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/NdEhmTPa5vI3lYf.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;br /&gt;
安装完成后，我们可以使用  &lt;code&gt;nrm ls&lt;/code&gt;  查看所有的可用源，展示的源前有 * 的表示目前正在使用的源。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/lwBn5fXo9MgNdqc.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2切换源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2切换源&#34;&gt;#&lt;/a&gt; 2. 切换源&lt;/h2&gt;
&lt;p&gt;我们通过  &lt;code&gt;nrm ls&lt;/code&gt;  查看目前可用的源后，需要切换到某个源，直接使用  &lt;code&gt;nrm use &amp;lt;源名&amp;gt;&lt;/code&gt;  即可完成切换。比如我们需要切换到 taobao 的源直接使用  &lt;code&gt;nrm use taobao&lt;/code&gt; &lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/iDqWpIURM9n2AuC.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3增加源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3增加源&#34;&gt;#&lt;/a&gt; 3. 增加源&lt;/h2&gt;
&lt;p&gt;有时我们需要增加一些定制的源，如公司内部自己的私有源，我们使用  &lt;code&gt;nrm add &amp;lt;源名&amp;gt; &amp;lt;源 url&amp;gt;&lt;/code&gt;  进行添加。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/uvs76ydPr1eiQEW.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4删除源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4删除源&#34;&gt;#&lt;/a&gt; 4. 删除源&lt;/h2&gt;
&lt;p&gt;删除不需要的源使用  &lt;code&gt;nrm del &amp;lt;源名&amp;gt;&lt;/code&gt;  进行删除&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/zs9ZYStfHnk1OWG.png&#34; alt=&#34;在这里插入图片描述&#34; /&gt;&lt;br /&gt;
我们也可以使用  &lt;code&gt;nrm test &amp;lt;源名&amp;gt;&lt;/code&gt;  去测试速度，以方便我们选择使用哪个源&lt;/p&gt;
&lt;h3 id=&#34;因为在此系统上禁止运行脚本解决办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#因为在此系统上禁止运行脚本解决办法&#34;&gt;#&lt;/a&gt; “因为在此系统上禁止运行脚本” 解决办法&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/493496089&#34;&gt;原地址&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set-ExecutionPolicy RemoteSigned&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;改回去&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set-ExecutionPolicy Default&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/kyMZD9n5pUo8Bcx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-typescript-并检测-tsc短端口类型脚本编译器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装-typescript-并检测-tsc短端口类型脚本编译器&#34;&gt;#&lt;/a&gt; 安装 typescript 并检测 tsc（短端口类型脚本编译器）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;npm i -g typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tsc -v
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用-terminal-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用-terminal-命令&#34;&gt;#&lt;/a&gt; 常用 terminal 命令&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ~
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-Sh&#34;&gt;mkdir #新文件夹名字
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/6JmfTwYqzDoNr1R.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/wH9lBKIvO4nWixh.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
在 vscode 中打开现在的目录文件夹&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;code &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/6HzlByNfnPmwj8X.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux-创建新文件的命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-创建新文件的命令&#34;&gt;#&lt;/a&gt; linux 创建新文件的命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;vi 或 vim&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[root@localhost ~]# vi file1.txt// 直接创建并打开一个文件 file1.txt&lt;/p&gt;
&lt;p&gt;用 vi 编辑器编辑文本后，如果是新创建的文件，默认保存在当前目录下，如果想保存到指定目录下，可以在 vi 编辑器中，按 Esc 键切换到命令模式，然后用 w 命令写到指定目录下的指定新建文件，如写到 /tmp/test.txt 文件，则在 vi 命令模式下输入: w /tmp/test.txt 写好后，在 /tmp 目录下新的文件 test.txt 就被创建了。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;touch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[root@localhost ~]# touch file2.txt// 创建新的空文件 file2.txt&lt;/p&gt;
&lt;p&gt;touch 的另一个作用是更改一个文件或目录的时间。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;echo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[root@localhost ~]# echo &amp;quot;this is a new file&amp;quot; &amp;gt; file3.txt// 创建文件 file3.txt 并将 this is a new file 写入&lt;/p&gt;
&lt;p&gt;(说明：使用&amp;gt; 指令覆盖文件原内容并重新输入内容，若文件不存在则创建文件。)&lt;/p&gt;
&lt;p&gt;[root@localhost ~]# echo &amp;quot;add contents&amp;quot; &amp;gt;&amp;gt;file3.txt// 在已存在的文件补充写入新内容 add contents&lt;/p&gt;
&lt;p&gt;(说明：使用&amp;gt;&amp;gt; 指令向文件追加内容，原内容将保存。)&lt;/p&gt;
&lt;p&gt;拓展： Linux 中输出重定向 &amp;gt; 和 &amp;gt;&amp;gt; 的区别，&amp;gt; 是覆盖，&amp;gt;&amp;gt; 是追加&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;会重写文件，如果文件里面有内容会覆盖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;追加文件。也就是如果文件里面有内容会把新内容追加到文件尾&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;less 、more 、cat&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三者都是将文件内容输出到标准输出，其中 less 和 more 可以分页显示，cat 是显示全部。&lt;/p&gt;
&lt;p&gt;三者可以根据已经存在的文件创建新的文件。假设已经存在文件 1.txt。&lt;/p&gt;
&lt;p&gt;cat 1.txt &amp;gt; 2.txt&lt;/p&gt;
&lt;p&gt;less 1.txt &amp;gt; 3.txt&lt;/p&gt;
&lt;p&gt;more 1.txt &amp;gt; 4.txt&lt;/p&gt;
&lt;p&gt;此时创建的文件内容都和 1.txt 中文件内容相同。&lt;/p&gt;
&lt;p&gt;cat 命令可以一次显示整个文件，如果文件比较大，使用不是很方便；适用于文件内容少的情况。&lt;/p&gt;
&lt;p&gt;cat 主要有三大功能：&lt;/p&gt;
&lt;p&gt;1) 一次显示整个文件: cat filename&lt;/p&gt;
&lt;p&gt;2) 从键盘创建一个文件: cat &amp;gt; filename 只能创建新文件，不能编辑已有文件.&lt;/p&gt;
&lt;p&gt;3) 将几个文件合并为一个文件: cat file1 file2 &amp;gt; file&lt;/p&gt;
&lt;p&gt;more 命令可以让屏幕在显示满一屏幕时暂停，此时可按空格健继续显示下一个画面，或按 Q 键停止显示。&lt;/p&gt;
&lt;p&gt;less 命令也可以分页显示文件，和 more 命令的区别就在于它支持上下键卷动屏幕，当结束浏览时，只要在 less 命令的提示符 “:” 下按 Q 键即可。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;cd&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[root@localhost ~]# cd &amp;gt; file3.txt// 创建新的空文件 file3.txt&lt;/p&gt;
&lt;p&gt;[root@localhost ~]# cd &amp;gt;&amp;gt; file4.txt// 创建新的空文件 file3.txt&lt;/p&gt;
&lt;p&gt;cd 最主要的作用是切换目录，在 cd 后面跟 &amp;gt; 或 &amp;gt;&amp;gt; 再加上文件名就可以创建一个内容为空的文件。它和 echo 的区别之处在于 echo 可写文件内容，而 cd 并不能。&lt;br /&gt;
————————————————&lt;br /&gt;
 版权声明：本文为 CSDN 博主「csdnlzy」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。&lt;/p&gt;
&lt;h3 id=&#34;删除文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#删除文件&#34;&gt;#&lt;/a&gt; 删除文件&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://t.zoukankan.com/macrored-p-11415741.html&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用-typesript-编译器使得我们可以编译-indexts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-typesript-编译器使得我们可以编译-indexts&#34;&gt;#&lt;/a&gt; 使用 typesript 编译器使得我们可以编译 index.ts&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tsc index.ts&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;会出现一个 index.js 就编译好了&lt;/p&gt;
&lt;h2 id=&#34;创建-typescript-配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建-typescript-配置文件&#34;&gt;#&lt;/a&gt; 创建 Typescript 配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;tsc --init
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;在-vscode-中搜索文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在-vscode-中搜索文件&#34;&gt;#&lt;/a&gt; 在 VSCODE 中搜索文件&lt;/h3&gt;
&lt;p&gt;ctrl + p&lt;/p&gt;
&lt;h3 id=&#34;创建类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建类&#34;&gt;#&lt;/a&gt; 创建类&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/dlzeJytuF5UL9Dg.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这是 Typescript 的初始化属性方法&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/z4sZwFr8vMdUWTO.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这是 Javascript 的&lt;br /&gt;
声明 id/owner/balance 的类型 在 JavaScript 中不存在&lt;/p&gt;
&lt;h3 id=&#34;报错-throw-new-error&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#报错-throw-new-error&#34;&gt;#&lt;/a&gt; 报错: throw new Error&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/3IMogFkEQ5YXCKc.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/p965kdPCq3AhgNG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;一步编译并运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一步编译并运行&#34;&gt;#&lt;/a&gt; 一步编译并运行&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/47Jc5fFvxyLIrp9.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
mac 下的&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/ZERTsi7vNQJ6dYX.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Linux 下的&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tsc &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;node&lt;/span&gt; ~&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Windows 下的&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/dD4KO2ZIYiGsmNR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;只读修饰符-在类型声明的时候-加上-readonly-只能在构造函数内设置它&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#只读修饰符-在类型声明的时候-加上-readonly-只能在构造函数内设置它&#34;&gt;#&lt;/a&gt; 只读修饰符 在类型声明的时候 加上 readonly (只能在构造函数内设置它)&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/7qfzeILgmMy435s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/MkJVPURgiZKHaxs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 继承 inheritance 即类中共同的属性 防止重复&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; firstName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; lastName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意这里不能 return 任何 因为要返回一个实例对象 object 类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fullName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;firstName &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lastName&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Walking&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; studentId&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; firstName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lastName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 这里使用访问修饰符时：public /private 我们本质上是在创建一个参数属性 所以类型脚本编译器将创建此名称的属性并为我们初始化它 这里我们不想用公共修饰符 public 因为之前已经在 Person 里声明且初始化过了&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;firstName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lastName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 在 ts 中 有一个特殊的关键字 super 去让我们来参考 reference 基础的类 basic class&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;takeTest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Taking a test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; student &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;john@gmail.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;折叠代码块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#折叠代码块&#34;&gt;#&lt;/a&gt; 折叠代码块&lt;/h3&gt;
&lt;p&gt;ctrl + k + 0 折叠全部&lt;br /&gt;
 ctrl + k + j 展开全部&lt;/p&gt;
&lt;p&gt;ctrl + shift + [ 折叠选中&lt;br /&gt;
 \ 反义符号&lt;br /&gt;
 ctrl + shift + ] 展开选中&lt;/p&gt;
&lt;h3 id=&#34;属性-properties-运算符-operator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性-properties-运算符-operator&#34;&gt;#&lt;/a&gt; 属性 Properties 运算符 Operator&lt;/h3&gt;
&lt;h3 id=&#34;这些东西非常有用-且内置在-typescript-中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#这些东西非常有用-且内置在-typescript-中&#34;&gt;#&lt;/a&gt; 这些东西非常有用 且内置在 Typescript 中&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;typescriptlang.org/docs/handbook/utility-types.html&#34;&gt;原链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;65-至-68-需复习记得写笔记-78-属性装饰器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#65-至-68-需复习记得写笔记-78-属性装饰器&#34;&gt;#&lt;/a&gt; 6.5 至 6.8 需复习记得写笔记 7.8 属性装饰器&lt;/h3&gt;
&lt;h3 id=&#34;展开运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#展开运算符&#34;&gt;#&lt;/a&gt; 展开运算符 ...&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/a432a9e78949&#34;&gt;展开运算符&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ctrl-移动到新文件或者删除模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctrl-移动到新文件或者删除模块&#34;&gt;#&lt;/a&gt; ctrl + . 移动到新文件或者删除模块&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/JC6UtTRiW9IGHbY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;lodash-流行的应用程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lodash-流行的应用程序&#34;&gt;#&lt;/a&gt; lodash 流行的应用程序&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/MfSojCyk2XlpeY4.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
因为 lodash 纯纯 JS 所以需要类型注释 使得构建应用程序更快&lt;br /&gt;
所以再装一个类型注释库 @types 是很流行的 JS 类型注释库 里面有所有 JS 包的类型注释&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt; @types/lodash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;-D 开发环境安装 也就是不会出现在上线环境&lt;br /&gt;
 @types/ + 上 JS 包&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/UNFM5fXyRi2KSPh.png&#34; alt=&#34;Pasted image 20230104230218&#34; /&gt;&lt;br /&gt;
 这样就可以出现提示了&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/bPVMUXvisc7OryI.png&#34; alt=&#34;Pasted image 20230104230401&#34; /&gt;&lt;br /&gt;
 包和声明文件一般不会分开&lt;/p&gt;
&lt;h2 id=&#34;react&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react&#34;&gt;#&lt;/a&gt; React&lt;/h2&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npx create-react-app reminders-app &lt;span class=&#34;token parameter variable&#34;&gt;--template&lt;/span&gt; typescript&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建一个叫 reminders-app 的 react 且使用 typescript&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/Wh9QGLDtRdnuBEV.png&#34; alt=&#34;Pasted image 20230104233058&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;button.btn.btn-primary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个 button className 为 btn btn-primary&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/dG9w5zgelPZoJq4.png&#34; alt=&#34;Pasted image 20230104233712&#34; /&gt;&lt;/p&gt;
&lt;p&gt;还是一样的 ctrl + .&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/UGcnwb4qm5vMIsE.png&#34; alt=&#34;Pasted image 20230104234206&#34; /&gt;&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s2.loli.net/2024/08/09/H3at5vrYZqQJVdz.png&#34; alt=&#34;Pasted image 20230104234224&#34; /&gt;&lt;br /&gt;
 就会自动创建了&lt;/p&gt;
</content>
        <category term="Typescript" scheme="http://example.com/categories/Typescript/" />
        <updated>2024-08-03T08:09:34.473Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/08/03/%E5%8F%8B%E9%93%BE%E6%B7%BB%E5%8A%A0/</id>
        <title>友链添加</title>
        <link rel="alternate" href="http://example.com/2024/08/03/%E5%8F%8B%E9%93%BE%E6%B7%BB%E5%8A%A0/"/>
        <content type="html">&lt;h1 id=&#34;查看友链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看友链&#34;&gt;#&lt;/a&gt; 查看友链&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Noir&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;a href=&#34;/friends/&#34; class=&#34;image&#34; data-background-image=&#34;https://2.gravatar.com/avatar/6f9c7742c6e97f0e83534c95c4088a2fec3aade410c8b72622137a876e488644&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;info&#34;&gt;
        &lt;a href=&#34;/friends/&#34; class=&#34;title&#34;&gt;查看友链&lt;/a&gt;
        &lt;p class=&#34;desc&#34;&gt;Noir&#39;s Blog &amp; Computer Notes&lt;/p&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h1 id=&#34;申请方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#申请方法&#34;&gt;#&lt;/a&gt; 申请方法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;添加本站后，在下方 Post 处留言，格式如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token key atrule&#34;&gt;site&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#网站的名字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#您的名字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#您的网址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#简短描述&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#一张图片&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#方块颜色&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="FriendChainAdd" scheme="http://example.com/categories/FriendChainAdd/" />
        <category term="FriendChainAdd" scheme="http://example.com/tags/FriendChainAdd/" />
        <updated>2024-08-03T05:56:15.391Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/08/02/Web3/Solidity/</id>
        <title>Solidity</title>
        <link rel="alternate" href="http://example.com/2024/08/02/Web3/Solidity/"/>
        <content type="html">&lt;h1 id=&#34;solidity&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#solidity&#34;&gt;#&lt;/a&gt; Solidity&lt;/h1&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;Solidity Academy&#34; style=&#34;--block-color:#e9546b;&#34;&gt;&lt;a href=&#34;https://www.wtf.academy/&#34; class=&#34;image&#34; data-background-image=&#34;https://www.wtf.academy/img/logo.png&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;info&#34;&gt;
        &lt;a href=&#34;https://www.wtf.academy/&#34; class=&#34;title&#34;&gt;Solidity Academy&lt;/a&gt;
        &lt;p class=&#34;desc&#34;&gt;Web3 Academy&lt;/p&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;item&#34; title=&#34;Remix&#34; style=&#34;--block-color:#9d5b8b;&#34;&gt;&lt;a href=&#34;https://remix.ethereum.org/&#34; class=&#34;image&#34; data-background-image=&#34;/assets/404.png&#34;&gt;&lt;/a&gt;
        &lt;div class=&#34;info&#34;&gt;
        &lt;a href=&#34;https://remix.ethereum.org/&#34; class=&#34;title&#34;&gt;Remix&lt;/a&gt;
        &lt;p class=&#34;desc&#34;&gt;以太链上的合约开发 IDE&lt;/p&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</content>
        <category term="Web3" scheme="http://example.com/categories/Web3/" />
        <category term="Web3" scheme="http://example.com/tags/Web3/" />
        <category term="Solidity" scheme="http://example.com/tags/Solidity/" />
        <updated>2024-08-02T06:56:14.159Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
        <title>选择排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
        <content type="html"></content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.535Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</id>
        <title>计数排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void counting_sort()
&amp;#123;
    int sorted[N];
    int maxv = a[0];
    for (int i = 1; i &amp;lt; n; i ++ )
        if (maxv &amp;lt; a[i])
            maxv = a[i];
    int count[maxv+1];
    for (int i = 0; i &amp;lt; n; i ++ ) count[a[i]] ++ ;
    for (int i = 1; i &amp;lt;= maxv; i ++ ) count[i] += count[i-1];
    for (int i = n-1; i &amp;gt;= 0; i -- )
    &amp;#123;
        sorted[count[a[i]]-1] = a[i];
        count[a[i]] -- ;
    &amp;#125;
    for (int i = 0; i &amp;lt; n; i ++ ) a[i] = sorted[i];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.529Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%A1%B6%E6%8E%92%E5%BA%8F/</id>
        <title>桶排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;h6 id=&#34;基数排序是桶排序的特例优势是可以处理浮点数和负数劣势是还要配合别的排序函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基数排序是桶排序的特例优势是可以处理浮点数和负数劣势是还要配合别的排序函数&#34;&gt;#&lt;/a&gt; （基数排序是桶排序的特例，优势是可以处理浮点数和负数，劣势是还要配合别的排序函数）&lt;/h6&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;vector&amp;lt;int&amp;gt; bucketSort(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
    int n = nums.size();
    int maxv = *max_element(nums.begin(), nums.end());
    int minv = *min_element(nums.begin(), nums.end());
    int bs = 1000;
    int m = (maxv-minv)/bs+1;
    vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; bucket(m);
    for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
        bucket[(nums[i]-minv)/bs].push_back(nums[i]);
    &amp;#125;
    int idx = 0;
    for (int i = 0; i &amp;lt; m; ++i) &amp;#123;
        int sz = bucket[i].size();
        bucket[i] = quickSort(bucket[i]);
        for (int j = 0; j &amp;lt; sz; ++j) &amp;#123;
            nums[idx++] = bucket[i][j];
        &amp;#125;
    &amp;#125;
    return nums;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.523Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
        <title>插入排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void insert_sort()
&amp;#123;
    for (int i = 1; i &amp;lt; n; i ++ )
    &amp;#123;
        int x = a[i];
        int j = i-1;

        while (j &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; a[j])
        &amp;#123;
            a[j+1] = a[j];
            j -- ;
        &amp;#125;
        a[j+1] = x;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.518Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%BF%AB%EF%BC%89/</id>
        <title>快速排序（最快）</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88%E6%9C%80%E5%BF%AB%EF%BC%89/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void quick_sort(int l, int r)
&amp;#123;
    if (l &amp;gt;= r) return ;

    int x = a[l+r&amp;gt;&amp;gt;1], i = l-1, j = r+1;
    while (i &amp;lt; j)
    &amp;#123;
        while (a[++ i] &amp;lt; x);
        while (a[-- j] &amp;gt; x);
        if (i &amp;lt; j) swap(a[i], a[j]);
    &amp;#125;
    sort(l, j), sort(j+1, r);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.512Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
        <title>归并排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void merge_sort(int l, int r)
&amp;#123;
    if (l &amp;gt;= r) return;
    int temp[N];
    int mid = l+r&amp;gt;&amp;gt;1;
    merge_sort(l, mid), merge_sort(mid+1, r);
    int k = 0, i = l, j = mid+1;
    while (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= r)
    &amp;#123;
        if (a[i] &amp;lt; a[j]) temp[k ++ ] = a[i ++ ];
        else temp[k ++ ] = a[j ++ ];

    &amp;#125;
    while (i &amp;lt;= mid) temp[k ++ ] = a[i ++ ];
    while (j &amp;lt;= r) temp[k ++ ] = a[j ++ ];
    for (int i = l, j = 0; i &amp;lt;= r; i ++ , j ++ ) a[i] = temp[j];
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.506Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</id>
        <title>希尔排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void shell_sort()
&amp;#123;
    for (int gap = n &amp;gt;&amp;gt; 1; gap; gap &amp;gt;&amp;gt;= 1)
    &amp;#123;
        for (int i = gap; i &amp;lt; n; i ++ )
        &amp;#123;
            int x = a[i];
            int j;
            for (j = i; j &amp;gt;= gap &amp;amp;&amp;amp; a[j-gap] &amp;gt; x; j -= gap)
                a[j] = a[j-gap];
            a[j] = x;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.500Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
        <title>堆排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;p&gt;（须知此排序为使用了模拟堆，为了使最后一个非叶子节点的编号为 n/2，数组编号从 1 开始)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void down(int u)
&amp;#123;
    int t = u;
    if (u&amp;lt;&amp;lt;1 &amp;lt;= n &amp;amp;&amp;amp; h[u&amp;lt;&amp;lt;1] &amp;lt; h[t]) t = u&amp;lt;&amp;lt;1;
    if ((u&amp;lt;&amp;lt;1|1) &amp;lt;= n &amp;amp;&amp;amp; h[u&amp;lt;&amp;lt;1|1] &amp;lt; h[t]) t = u&amp;lt;&amp;lt;1|1;
    if (u != t)
    &amp;#123;
        swap(h[u], h[t]);
        down(t);
    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    for (int i = 1; i &amp;lt;= n; i ++ ) cin &amp;gt;&amp;gt; h[i];
    for (int i = n/2; i; i -- ) down(i);
    while (true)
    &amp;#123;
        if (!n) break;
        cout &amp;lt;&amp;lt; h[1] &amp;lt;&amp;lt; &#39; &#39;;
        h[1] = h[n];
        n -- ;
        down(1);
    &amp;#125;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.493Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</id>
        <title>基数排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int maxbit()
&amp;#123;
    int maxv = a[0];
    for (int i = 1; i &amp;lt; n; i ++ )
        if (maxv &amp;lt; a[i])
            maxv = a[i];
    int cnt = 1;
    while (maxv &amp;gt;= 10) maxv /= 10, cnt ++ ;

    return cnt;
&amp;#125;
void radixsort()
&amp;#123;
    int t = maxbit();
    int radix = 1;

    for (int i = 1; i &amp;lt;= t; i ++ )
    &amp;#123;
        for (int j = 0; j &amp;lt; 10; j ++ ) count[j] = 0;
        for (int j = 0; j &amp;lt; n; j ++ )
        &amp;#123;
            int k = (a[j] / radix) % 10;
            count[k] ++ ;
        &amp;#125;
        for (int j = 1; j &amp;lt; 10; j ++ ) count[j] += count[j-1];
        for (int j = n-1; j &amp;gt;= 0; j -- )
        &amp;#123;
            int k = (a[j] / radix) % 10;
            temp[count[k]-1] = a[j];
            count[k] -- ;
        &amp;#125;
        for (int j = 0; j &amp;lt; n; j ++ ) a[j] = temp[j];
        radix *= 10;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.487Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
        <title>冒泡排序</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void bubble_sort()
&amp;#123;
    for (int i = n-1; i &amp;gt;= 1; i -- )
    &amp;#123;
        bool flag = true;
        for (int j = 1; j &amp;lt;= i; j ++ )
            if (a[j-1] &amp;gt; a[j])
            &amp;#123;
                swap(a[j-1], a[j]);
                flag = false;
            &amp;#125;
        if (flag) return;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.482Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/Classification/</id>
        <title>十大排序算法总结</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Top%2010%20Sorting%20Algorithm/Classification/"/>
        <content type="html">&lt;h3 id=&#34;十大排序算法总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十大排序算法总结&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.acwing.com/solution/content/26513/&#34;&gt;十大排序算法总结&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;排序算法的分类：&lt;br /&gt;
1. 插入：[[插入排序]]，折半插入，[[希尔排序]]&lt;br /&gt;
 2. 交换：[[冒泡排序]]，[[快速排序（最快）]]&lt;br /&gt;
 3. 选择：[[选择排序]]，[[堆排序]]&lt;br /&gt;
 4. 归并：[[归并排序]]（不只二路归并）&lt;br /&gt;
5. 基数：[[基数排序]]&lt;/p&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Top 10 Sorting Algorithm" scheme="http://example.com/categories/Algorithm/Algorithm-Top-10-Sorting-Algorithm/" />
        <updated>2024-07-31T14:16:49.474Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20845.%20%E5%85%AB%E6%95%B0%E7%A0%81/</id>
        <title>AcWing 845. 八数码</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20845.%20%E5%85%AB%E6%95%B0%E7%A0%81/"/>
        <content type="html">&lt;h3 id=&#34;八数码-bfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八数码-bfs&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.acwing.com/problem/content/847/&#34;&gt;八数码 - BFS&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![[Pasted image 20221227151816.png]]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Search &amp; Graph Theory" scheme="http://example.com/categories/Algorithm/Algorithm-Search-Graph-Theory/" />
        <updated>2024-07-31T14:16:49.432Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20844.%20%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%88BFS%EF%BC%89/</id>
        <title>AcWing 844. 走迷宫（BFS）</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20844.%20%E8%B5%B0%E8%BF%B7%E5%AE%AB%EF%BC%88BFS%EF%BC%89/"/>
        <content type="html">&lt;h3 id=&#34;走迷宫-bfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#走迷宫-bfs&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.acwing.com/problem/content/846/&#34;&gt;走迷宫 - BFS&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstring&amp;gt;

using namespace std;

typedef pair&amp;lt;int, int&amp;gt; PII;

const int N = 110;

int n, m;
int g[N][N];
int d[N][N];
PII q[N * N];

int bfs()&amp;#123;
	int hh = 0, tt = 0;
	q[0] = &amp;#123;0, 0&amp;#125;;
	memset(d, -1, sizeof d);
	d[0][0] = 0;
	int dx[4] = &amp;#123;-1, 0, 1, 0&amp;#125;, dy[4] = &amp;#123;0, 1, 0, -1&amp;#125;;
	while(hh &amp;lt;= tt)&amp;#123;
	//while 队列不空
		auto t = q[hh++];
		//每一次取出来队头元素 即 t = 队头
		for(int i = 0; i &amp;lt; 4; i++)&amp;#123;
			int x = t.first + dx[i], y = t.second + dy[i];
			//沿着这个方向走
			if(x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; m &amp;amp;&amp;amp; g[x][y] == 0 &amp;amp;&amp;amp; d[x][y] == -1)&amp;#123;
				//并且在边界内的话                      并且是空地可以走   并且没有走过的话
				//如果不是第一次搜到即走过一次了的话就不是BFS 也就不是最短距离
				//注意这里是一圈一圈搜的
				d[x][y] = d[t.first][t.second] + 1;
				q[++ tt] = &amp;#123;x, y&amp;#125;;
				//将这个点加入队列
			&amp;#125;
		&amp;#125;
	&amp;#125;
	return d[n - 1][m - 1];
	//输出右下角这个点的距离
&amp;#125;

int main()&amp;#123;
	cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
	for(int i = 0; i &amp;lt; n; i++)
		for(int j = 0; j &amp;lt; m; j++)
			cin &amp;gt;&amp;gt; g[i][j];
	cout &amp;lt;&amp;lt; bfs() &amp;lt;&amp;lt; endl;
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![[Pasted image 20221227150900.png]]&lt;br /&gt;
![[Pasted image 20221227151607.png]]&lt;br /&gt;
![[Pasted image 20221227151454.png]]&lt;/p&gt;
&lt;h2 id=&#34;只有当所有边的权重即边权都是1的时候才可以用bfs求最短路一般情况下都要用专门的最短路算法求最短路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#只有当所有边的权重即边权都是1的时候才可以用bfs求最短路一般情况下都要用专门的最短路算法求最短路&#34;&gt;#&lt;/a&gt; 只有当所有边的权重（即边权）都是 1 的时候才可以用 BFS 求最短路一般情况下都要用专门的最短路算法求最短路&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//dp问题可以被看成是一种特殊的最短路问题 即最短路问题是包含dp问题的 即dp问题就是没有环的最短路
//深搜可以保证可以搜到终点 但是不能保证搜到的路径是最短的

//不是所有的最短路问题都可以用bfs来做 只有当所有边的权重都一样的时候 比如说边权=1时 可以用bfs
//一般情况下都要用专门的最短路算法求最短路

//dp问题肯定不会用最短路算法来求 因为最短路算法的时间复杂度比较高 dp问题的时间复杂度比较低
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;queue&amp;gt;


using namespace std;

const int N = 110;


typedef pair&amp;lt;int, int&amp;gt; PII;

int n, m;
int g[N][N];
int d[N][N];
//如果需要记录路径 只需要记录一下哪儿个点是从哪儿个点拓展出来的就可以了
PII q[N * N], Prev[N][N];

int bfs()&amp;#123;
    int hh = 0, tt = 0;
    q[0] = &amp;#123;0, 0&amp;#125;;
    
    memset(d, -1, sizeof d);//将所有距离初始化成-1 表示没有走过
    d[0][0] = 0;//d第0初始化成0 表示已经走过了
    
    //可以用向量表示往上下左右走
    //上 (-1, 0) 右 (0, 1) 下 (1, 0) 左 (0, -1)
    
    //即  -1         0         1         0
    //        0         1         0         -1
    int dx[4] = &amp;#123;-1, 0, 1, 0&amp;#125;, dy[4] = &amp;#123;0, 1, 0, -1&amp;#125;;
    
    while(hh &amp;lt;= tt)&amp;#123;
        auto t = q[hh++];//每次取出队头
        
        for(int i = 0; i &amp;lt; 4; i++)&amp;#123;
            int x = t.first + dx[i], y = t.second + dy[i];
            if(x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt; n &amp;amp;&amp;amp; y &amp;gt;= 0 &amp;amp;&amp;amp; y &amp;lt; m &amp;amp;&amp;amp; g[x][y] == 0 &amp;amp;&amp;amp; d[x][y] == -1)&amp;#123;
            //这个判断的意思是 如果沿着这个边界走的话是在边界以内的 并且这个点是可以走的 即 != 0 并且这个点没有走过 即 d[x][y] == -1
                d[x][y] = d[t.first][t.second] + 1;//BFS只有第一次搜到的才是最短距离 如果不是第一次搜到那就不是最短距离
                Prev[x][y] = t;
                q[++ tt] = &amp;#123;x, y&amp;#125;;
                //新的 x 新的 y 塞进队列
            &amp;#125;
        &amp;#125;
    &amp;#125;
    
    //输出路径
    int x = n - 1, y = m - 1;
    while(x || y)&amp;#123;
        // cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; y &amp;lt;&amp;lt; endl;
        auto t = Prev[x][y];
        x = t.first, y = t.second;
    &amp;#125;
    
    return d[n - 1][m - 1];
&amp;#125;


int main()&amp;#123;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    for(int i = 0; i &amp;lt; n; i++)
        for(int j = 0; j &amp;lt; m; j++)
            cin &amp;gt;&amp;gt; g[i][j];
            
    cout &amp;lt;&amp;lt; bfs() &amp;lt;&amp;lt; endl;
    
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Search &amp; Graph Theory" scheme="http://example.com/categories/Algorithm/Algorithm-Search-Graph-Theory/" />
        <updated>2024-07-31T14:16:49.427Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20843.%20n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</id>
        <title>AcWing 843. n-皇后问题</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20843.%20n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h3 id=&#34;n皇后问题-dfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#n皇后问题-dfs&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.acwing.com/problem/content/845/&#34;&gt;N 皇后问题 - DFS&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

const int N = 20;

int n;
char g[N][N];
bool col[N], dg[N], udg[N];

void dfs(int u)&amp;#123;
	if(u == n)&amp;#123;
		for(int i = 0; i &amp;lt; n; i++) puts(g[i]);
		puts(&amp;quot;&amp;quot;);
		return;
	&amp;#125;
	for(int i = 0; i &amp;lt; n; i++)&amp;#123;
		if(!col[i] &amp;amp;&amp;amp; !dg[u + i] &amp;amp;&amp;amp; !udg[n - u + i])&amp;#123;
		//这个 偏移量 相当于 把 负数和 这个数 简单的映射了 一下
			g[u][i] = &#39;Q&#39;;
			col[i] = dg[u + i] = udg[n - u + i] = true;
			dfs(u + 1);
			col[i] = dg[u + i] = udg[n - u + i] = false;
			g[u][i] = &#39;.&#39;;
		&amp;#125;
	&amp;#125;
&amp;#125;
int main()&amp;#123;
	cin &amp;gt;&amp;gt; n;
	for(int i = 0; i &amp;lt; n; i++)
		for(int j = 0; j &amp;lt; n; j++)
			g[i][j] = &#39;.&#39;;
	dfs(0);
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;为什么求截距就可以判断两个点在一条对角线或者反对角线呢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么求截距就可以判断两个点在一条对角线或者反对角线呢&#34;&gt;#&lt;/a&gt; 为什么求截距就可以判断两个点在一条对角线或者反对角线呢？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;因为b可以唯一确定一条直线，在同一条直线上面b都是相同的，所以以b为下标是可以繁殖对角线和反对角线上面放皇后的
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

const int N = 20;
int n;
char g[N][N];
bool row[N], col[N], dg[N], udg[N];

void dfs(int x, int y, int s)&amp;#123;
	if(y == n)&amp;#123;
		y = 0;
		x ++;
	&amp;#125;
	if(x == n)&amp;#123;
		if(s == n)&amp;#123;
			for(int i = 0; i &amp;lt; n; i++) puts(g[i]);
			puts(&amp;quot;&amp;quot;);
		&amp;#125;
		return;
	&amp;#125;
	//不放皇后
	dfs(x, y + 1, s);
	//放皇后
	if(!row[x] &amp;amp;&amp;amp; !col[y] &amp;amp;&amp;amp; !dg[x + y] &amp;amp;&amp;amp;!udg[x - y + n])&amp;#123;
		g[x][y] = &#39;Q&#39;;
		row[x] = col[y] = dg[x + y] = udg[x - y + n] = true;
		dfs(x, y + 1, s + 1);
		row[x] = col[y] = dg[x + y] = udg[x - y + n] = false;
		g[x][y] = &#39;.&#39;;
	&amp;#125;
&amp;#125;
int main()&amp;#123;
	cin &amp;gt;&amp;gt; n;
	for(int i = 0; i &amp;lt; n; i++)&amp;#123;
		for(int j = 0; j &amp;lt; n; j++)&amp;#123;
			g[i][j] = &#39;.&#39;;
		&amp;#125;
	&amp;#125;
	dfs(0, 0, 0);
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://b23.tv/EtnaOZ3&#34;&gt;懒猫老师 - C 语言 - 递归函数 - 八皇后问题 (搜索，回溯)- 哔哩哔哩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe src=&amp;quot;&lt;a href=&#34;http://player.bilibili.com/player.html?aid=76265320&amp;amp;bvid=BV1wJ411U7Gy&amp;amp;cid=130453660&amp;amp;page=1&#34;&gt;http://player.bilibili.com/player.html?aid=76265320&amp;amp;bvid=BV1wJ411U7Gy&amp;amp;cid=130453660&amp;amp;page=1&lt;/a&gt;&amp;quot; scrolling=&amp;quot;no&amp;quot; border=&amp;quot;0&amp;quot; frameborder=&amp;quot;no&amp;quot; framespacing=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;true&amp;quot; width=&amp;quot;500px&amp;quot; height=&amp;quot;500px&amp;quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;![[Pasted image 20221225161908.png]]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//枚举方法1
// #include &amp;lt;iostream&amp;gt;

// using namespace std;

// const int N = 20;

// int n;
// char g[N][N];
// bool col[N], dg[N], udg[N];

// void dfs(int u)&amp;#123;
//     if(u == n)&amp;#123;
//         for(int i = 0;i &amp;lt; n; i++) puts(g[i]);
//         puts(&amp;quot;&amp;quot;);
//         return;
//     &amp;#125;
    
//     for(int i = 0; i &amp;lt; n; i++)
//         if(!col[i] &amp;amp;&amp;amp; !dg[u+ i] &amp;amp;&amp;amp; !udg[n - u + i])&amp;#123;//剪枝
//             g[u][i] = &#39;Q&#39;;
//             col[i] = dg[u + i] = udg[n - u + i] = true;//截距如下
//             //y = x + b                                                                                            y = -x + b
//             //b = y - x 因为 y - x 是负数，而数组下标不能为负数 所以给他加个偏移量 即 b = y - x + n                b =  y + x
//             dfs(u + 1);
//             col[i] = dg[u + i] = udg[n - u + i] = false;//恢复现场
//             g[u][i] = &#39;.&#39;;
//         &amp;#125;
// &amp;#125;

// int main()&amp;#123;
//     cin &amp;gt;&amp;gt; n;
//     for(int i = 0; i &amp;lt; n; i++)
//         for(int j = 0; j &amp;lt; n; j++)
//             g[i][j] = &#39;.&#39;;
            
//     dfs(0);
    
//     return 0;
// &amp;#125;



//枚举方法2
#include &amp;lt;iostream&amp;gt;

using namespace std;

const int N = 20;

int n;
char g[N][N];
bool row[N], col[N], dg[N], udg[N];

void dfs(int x, int y, int s)&amp;#123;
    if(y == n) y = 0, x++;
    
    if(x == n)&amp;#123;
        if(s == n)&amp;#123;
            for(int i = 0; i &amp;lt; n; i++) puts(g[i]);
            puts(&amp;quot;&amp;quot;);
        &amp;#125;
        
        return;
        //这边return下面那个dfs也会return出去到dfs下面的if去的
    &amp;#125;
    
    //不放皇后
    dfs(x, y + 1, s);
    
    //放皇后
    if(!row[x] &amp;amp;&amp;amp; !col[y] &amp;amp;&amp;amp; !dg[x + y] &amp;amp;&amp;amp; !udg[x - y + n])&amp;#123;
        g[x][y] = &#39;Q&#39;;
        row[x] = col[y] = dg[x + y] = udg[x - y + n] = true;
        dfs(x, y + 1, s + 1);
        row[x] = col[y] = dg[x + y] = udg[x - y + n] = false;
        g[x][y] = &#39;.&#39;;
    &amp;#125;
&amp;#125;

int main()&amp;#123;
    cin &amp;gt;&amp;gt; n;
    for(int i = 0; i &amp;lt; n; i++)
        for(int j = 0; j &amp;lt; n; j ++)
            g[i][j] = &#39;.&#39;;
            
    dfs(0, 0, 0);
    
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Search &amp; Graph Theory" scheme="http://example.com/categories/Algorithm/Algorithm-Search-Graph-Theory/" />
        <updated>2024-07-31T14:16:49.422Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20842.%20%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97%EF%BC%88DFS%EF%BC%89/</id>
        <title>AcWing 842. 排列数字（DFS）</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Search%20&amp;%20Graph%20Theory/AcWing%20842.%20%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97%EF%BC%88DFS%EF%BC%89/"/>
        <content type="html">&lt;h3 id=&#34;排列数字-深度优先遍历-dfs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排列数字-深度优先遍历-dfs&#34;&gt;#&lt;/a&gt; &lt;a href=&#34;https://www.acwing.com/problem/content/844/&#34;&gt;排列数字 - 深度优先遍历 DFS&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

const int N = 1e6 + 10;

int n;
int path[N];
bool st[N];

void dfs(int u)&amp;#123;
	if(u == n)&amp;#123;
		for(int i = 0; i &amp;lt; n; i++) printf(&amp;quot;%d &amp;quot;, path[i]);
		puts(&amp;quot;&amp;quot;);
		return;
	&amp;#125;
	//u &amp;lt; n
	for(int i = 1; i &amp;lt;= n; i++)&amp;#123;
		if(!st[i])&amp;#123;
			path[u] = i;
			st[i] = true;
			dfs(u + 1);
			path[u] = 0;
			st[i] = false;
		&amp;#125;
	&amp;#125;
&amp;#125;
int main()&amp;#123;
	cin &amp;gt;&amp;gt; n;
	dfs(0);
	return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;![[Pasted image 20221225142051.png]]&lt;br /&gt;
 DFS 和递归没有必要区分太开 没有必要区分它们之间的关系&lt;br /&gt;
！[[Pasted image 20221225143121.png]]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

const int N = 10;

int n;
int path[N];
bool st[N];

void dfs(int u)&amp;#123;
    if(u == n)&amp;#123;
        for(int  i = 0; i &amp;lt; n; i++) printf(&amp;quot;%d &amp;quot;, path[i]);
        
        printf(&amp;quot;\n&amp;quot;);
        return;
    &amp;#125;
    for(int i = 1; i &amp;lt;= n; i++)&amp;#123;
        if(!st[i])&amp;#123;
            path[u] = i;//将i放到当前位置上去
            st[i] = true;//记录一下这个数已经被用过了
            dfs(u + 1);//状态处理好之后递归到下一层
            
            
            //恢复现场
            // path[u] = 0;//这一段没有必要 因为递归到下一层path[u]在上面一定会被覆盖掉 所以不管是几都没问题
            st[i] = false;
        &amp;#125;
    &amp;#125;
&amp;#125;

int main()&amp;#123;
    cin &amp;gt;&amp;gt; n;
    
    dfs(0);
    
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Algorithm, Search &amp; Graph Theory" scheme="http://example.com/categories/Algorithm/Algorithm-Search-Graph-Theory/" />
        <updated>2024-07-31T14:16:49.417Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1.8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0randomshuffle%E5%92%8C%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0sort/</id>
        <title>随机函数randomshuffle和排序函数sort</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1.8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0randomshuffle%E5%92%8C%E6%8E%92%E5%BA%8F%E5%87%BD%E6%95%B0sort/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;ctime&amp;gt;//一般是可以把时间传进去当成一个随机种子

using namespace std;

// bool cmp(int a, int b)&amp;#123; //a是否应该排在b的前面
//     return a &amp;lt; b; //如果a &amp;lt; b的话 a就应该排在b的前面
// &amp;#125;


struct Rec&amp;#123;
    int x, y;
&amp;#125;a[5];
    
    
bool cmp(Rec a, Rec b)&amp;#123; //a是否应该排在b的前面
    return a.x &amp;lt; b.x; //如果a &amp;lt; b的话 a就应该排在b的前面
&amp;#125;

int main()&amp;#123;
    //int a[] = &amp;#123;1, 1, 2, 2, 3, 4&amp;#125;;
    vector&amp;lt;int&amp;gt; a(&amp;#123;1, 2, 3, 4, 5&amp;#125;);
    
    srand(time(0));//random_shuffle会用到随机种子 这个随机种子默认是0;
    
    
    random_shuffle(a.begin(), a.end());//左闭右开
    for(int x : a) cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#39; &#39;;
    cout &amp;lt;&amp;lt; endl;
    
    sort(a.begin(), a.end(), greater&amp;lt;int&amp;gt;());//加greater&amp;lt;int&amp;gt;()参数就可以变成从大到小排序
    
    sort(a.begin(), a.end(), cmp);
    
    for(int x : a) cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &#39; &#39;;
    cout &amp;lt;&amp;lt; endl;
    
    //自己定义结构体的话是否也能排序呢
    
    
    for(int i = 0; i &amp;lt; 5; i++)&amp;#123;
        a[i].x = -i;
        a[i].y = i;
    &amp;#125;
    
    for(int i = 0; i &amp;lt; 5; i++) printf(&amp;quot;(%d, %d)&amp;quot;, a[i].x, a[i].y);
    cout &amp;lt;&amp;lt; endl;
    
    sort(a, a + 5, cmp);
    
    for(int i = 0; i &amp;lt; 5; i++) printf(&amp;quot;(%d, %d)&amp;quot;, a[i].x, a[i].y);
    cout &amp;lt;&amp;lt; endl;
    
    // sort(a, a + 5);//因为结构体是没有比较函数的所以会报错
    sort
    
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Note" scheme="http://example.com/categories/Algorithm/Note/" />
        <category term="语法基础课" scheme="http://example.com/categories/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/" />
        <category term="1.8STL、常用库函数、位运算" scheme="http://example.com/categories/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1-8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/" />
        <updated>2024-07-31T14:16:49.361Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/07/31/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1.8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%98%9F%E5%88%97/</id>
        <title>队列</title>
        <link rel="alternate" href="http://example.com/2024/07/31/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1.8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/%E9%98%9F%E5%88%97/"/>
        <content type="html">&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;queue&amp;gt;//这个头文件是队列的 包含两个很重要的数据结构 第一个数据结构是queue队列 第二个数据结构是priority_queue优先队列


using namespace std;

int main()&amp;#123;
    // queue&amp;lt;int&amp;gt; q;
    // queue&amp;lt;double&amp;gt; a;
    // struct Rec&amp;#123;
    //     int a, x, y;
    // &amp;#125;;
    // queue&amp;lt;Rec&amp;gt; b;
    
    
    // 队列有一个性质就是先进先出 也就是如果我们按照123的顺序去插入的话 我们得用123的顺序去排出
    
    
    //与之相对的 有一个优先队列 优先队列是如下这个方式定义的
    queue&amp;lt;int&amp;gt; q;//队列
    //默认是一个大根堆
    priority_queue&amp;lt;int&amp;gt; a;//大根堆
    //如果希望小根堆 也就是队列默认返回一个最小值 需要加两个参数
    priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; b;//小根堆
    
    
    // priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; c;//可以换成其他的类型 pair是一个双关键字的 二元组?
    
    
    // struct Rec&amp;#123;
    //     int a, b;
    //     bool operator&amp;lt; (const Rec&amp;amp; t) const&amp;#123;//重载方式这么写 一定要重载小于号因为是大根堆
    //         return a &amp;lt; t.a;//表示a越大的结构体越大
    //     &amp;#125;
    // &amp;#125;;
    // //如果要优先队列定义结构体的话一定要重载小于号
    // priority_queue&amp;lt;Rec&amp;gt; d;
    
    //默认大根堆重载小于号
    //如果用的是大根堆的话就要重载小于号 如果要用小根堆的话重载的是大于号
    
    struct Rec&amp;#123;
        int a, b;
        bool operator&amp;gt; (const Rec&amp;amp; t) const&amp;#123;
            return a &amp;gt; t.a;
        &amp;#125;
    &amp;#125;;
    priority_queue&amp;lt;Rec, vector&amp;lt;Rec&amp;gt;, greater&amp;lt;Rec&amp;gt;&amp;gt; d;
    
    d.push(&amp;#123;1, 2&amp;#125;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Algorithm" scheme="http://example.com/categories/Algorithm/" />
        <category term="Note" scheme="http://example.com/categories/Algorithm/Note/" />
        <category term="语法基础课" scheme="http://example.com/categories/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/" />
        <category term="1.8STL、常用库函数、位运算" scheme="http://example.com/categories/Algorithm/Note/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/1-8STL%E3%80%81%E5%B8%B8%E7%94%A8%E5%BA%93%E5%87%BD%E6%95%B0%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97/" />
        <updated>2024-07-31T14:16:49.355Z</updated>
    </entry>
</feed>
